groups:
- name: terraform
  jobs:
  - apply-dns
  - bootstrap-development
  - bootstrap-easta
  - bootstrap-eastb
  - bootstrap-external-easta
  - bootstrap-external-eastb
  - bootstrap-external-production
  - bootstrap-external-staging
  - bootstrap-external-westb
  - bootstrap-external-westc
  - bootstrap-master-east
  - bootstrap-master-west
  - bootstrap-production
  - bootstrap-staging
  - bootstrap-tooling
  - bootstrap-westb
  - bootstrap-westc
  - plan-bootstrap-development
  - plan-bootstrap-easta
  - plan-bootstrap-eastb
  - plan-bootstrap-external-easta
  - plan-bootstrap-external-eastb
  - plan-bootstrap-external-production
  - plan-bootstrap-external-staging
  - plan-bootstrap-external-westb
  - plan-bootstrap-external-westc
  - plan-bootstrap-master-east
  - plan-bootstrap-master-west
  - plan-bootstrap-production
  - plan-bootstrap-staging
  - plan-bootstrap-tooling
  - plan-bootstrap-westb
  - plan-bootstrap-westc
  - plan-dns
  - pull-status-check
- name: terraform-east
  jobs:
  - apply-dns
  - bootstrap-easta
  - bootstrap-external-easta
  - bootstrap-master-east
  - plan-bootstrap-easta
  - plan-bootstrap-external-easta
  - plan-bootstrap-master-east
  - plan-dns
  - pull-status-check
- name: terraform-west
  jobs:
  - apply-dns
  - bootstrap-external-westb
  - bootstrap-external-westc
  - bootstrap-master-west
  - bootstrap-westb
  - bootstrap-westc
  - plan-bootstrap-external-westb
  - plan-bootstrap-external-westc
  - plan-bootstrap-master-west
  - plan-bootstrap-westb
  - plan-bootstrap-westc
  - plan-dns
  - pull-status-check
- name: certs
  jobs:
  - acme-certificate-development
  - acme-certificate-east-tooling
  - acme-certificate-easta
  - acme-certificate-easta-apps
  - acme-certificate-eastb
  - acme-certificate-eastb-apps
  - acme-certificate-staging
  - acme-certificate-production
  - acme-certificate-production-apps
  - acme-certificate-staging-pages
  - acme-certificate-staging-pages-sites
  - acme-certificate-west-tooling
  - acme-certificate-westb
  - acme-certificate-westb-apps
  - acme-certificate-westc
  - acme-certificate-westc-apps
- name: certs-west
  jobs:
  - acme-certificate-west-tooling
  - acme-certificate-westb
  - acme-certificate-westb-apps
  - acme-certificate-westc
  - acme-certificate-westc-apps
- name: certs-east
  jobs:
  - acme-certificate-east-tooling
  - acme-certificate-easta
  - acme-certificate-easta-apps
  - acme-certificate-eastb
  - acme-certificate-eastb-apps

jobs:
- name: pull-status-check
  plan:
  - get: pull-request
    version: every
    trigger: true
  - put: pull-request
    params:
      path: pull-request
      status: pending
      context: validate-terraform
  - task: validate-terraform
    config:
      platform: linux
      image_resource:
        type: docker-image
        source:
          repository: 18fgsa/concourse-task
      inputs:
      - name: pull-request
      params:
      run:
        path: pull-request/validate.sh
    on_success:
      put: pull-request
      params:
        path: pull-request
        status: success
        context: validate-terraform
    on_failure:
      put: pull-request
      params:
        path: pull-request
        status: failure
        context: validate-terraform

- name: plan-bootstrap-external-staging
  plan:
  - in_parallel:
    - get: pipeline-tasks
    - get: cg-provision-repo
      resource: cg-provision-repo-master
      trigger: true
    - get: plan-timer
      trigger: true
  - task: plan-update-external-staging
    file: pipeline-tasks/terraform-apply.yml
    input_mapping: {terraform-templates: cg-provision-repo}
    params: &external-staging-params
      TERRAFORM_ACTION: plan
      STACK_NAME: external-staging
      TEMPLATE_SUBDIR: terraform/stacks/external
      S3_TFSTATE_BUCKET: ((aws_external_s3_tfstate_bucket))
      AWS_ACCESS_KEY_ID: ((aws_external_access_key_id))
      AWS_SECRET_ACCESS_KEY: ((aws_external_secret_access_key))
      AWS_DEFAULT_REGION: ((aws_external_region))
      TF_VAR_stack_description: staging
      TF_VAR_aws_default_region: ((aws_external_region))
      # Do not copy the pattern below.  You should not need separate variables
      # for staging/prod.  Instead, use ${var.stack_name} in your .tf and get
      # IDs from `data` resources.
      TF_VAR_cdn_broker_username: ((cdn_broker_username_staging))
      TF_VAR_cdn_broker_bucket: ((cdn_broker_bucket_staging))
      TF_VAR_cdn_broker_cloudfront_prefix: ((cdn_broker_cloudfront_prefix_staging))
      TF_VAR_cdn_broker_hosted_zone: ((cdn_broker_hosted_zone_staging))
      TF_VAR_domain_broker_v2_username: ((domain_broker_v2_username_staging))
      TF_VAR_domain_broker_v2_bucket: ((domain_broker_v2_bucket_staging))
      TF_VAR_domain_broker_v2_cloudfront_prefix: ((domain_broker_v2_cloudfront_prefix_staging))
      TF_VAR_lets_encrypt_hosted_zone: ((lets_encrypt_hosted_zone_staging))
      TF_VAR_external_domain_broker_cloudfront_prefix: ((external_domain_broker_cloudfront_prefix_staging))
      TF_VAR_external_domain_broker_hosted_zone: ((external_domain_broker_hosted_zone_staging))
      TF_VAR_external_domain_broker_username: ((external_domain_broker_username_staging))
  - &notify-slack
    put: slack
    params:
      text_file: terraform-state/message.txt
      text:  |
        :terraform: $BUILD_JOB_NAME needs review
        <$ATC_EXTERNAL_URL/teams/$BUILD_TEAM_NAME/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME|View build details>
      channel: ((slack-channel))
      username: ((slack-username))
      icon_url: ((slack-icon-url))

- name: bootstrap-external-staging
  plan:
  - in_parallel:
    - get: pipeline-tasks
    - get: cg-provision-repo
      resource: cg-provision-repo-master
      passed: [plan-bootstrap-external-staging]
  - task: create-update-external-staging
    file: pipeline-tasks/terraform-apply.yml
    input_mapping: {terraform-templates: cg-provision-repo}
    params:
      <<: *external-staging-params
      TERRAFORM_ACTION: apply
  - task: terraform-state-to-yaml
    file: pipeline-tasks/terraform12-state-to-yaml.yml
    params:
      STATE_FILE: terraform.tfstate
  - put: terraform-yaml-external-staging
    params:
      file: terraform-yaml/state.yml

- name: plan-bootstrap-external-production
  plan:
  - in_parallel:
    - get: pipeline-tasks
    - get: cg-provision-repo
      resource: cg-provision-repo-master
      trigger: true
    - get: plan-timer
      trigger: true
  - task: plan-update-external-production
    file: pipeline-tasks/terraform-apply.yml
    input_mapping: {terraform-templates: cg-provision-repo}
    params: &external-production-params
      TERRAFORM_ACTION: plan
      STACK_NAME: external-production
      TEMPLATE_SUBDIR: terraform/stacks/external
      S3_TFSTATE_BUCKET: ((aws_external_s3_tfstate_bucket))
      AWS_ACCESS_KEY_ID: ((aws_external_access_key_id))
      AWS_SECRET_ACCESS_KEY: ((aws_external_secret_access_key))
      AWS_DEFAULT_REGION: ((aws_external_region))
      TF_VAR_stack_description: production
      TF_VAR_aws_default_region: ((aws_external_region))
      # Do not copy the pattern below.  You should not need separate variables
      # for staging/prod.  Instead, use ${var.stack_name} in your .tf and get
      # IDs from `data` resources.
      TF_VAR_cdn_broker_username: ((cdn_broker_username_production))
      TF_VAR_cdn_broker_bucket: ((cdn_broker_bucket_production))
      TF_VAR_cdn_broker_cloudfront_prefix: ((cdn_broker_cloudfront_prefix_production))
      TF_VAR_cdn_broker_hosted_zone: ((cdn_broker_hosted_zone_production))
      TF_VAR_domain_broker_v2_username: ((domain_broker_v2_username_production))
      TF_VAR_domain_broker_v2_bucket: ((domain_broker_v2_bucket_production))
      TF_VAR_domain_broker_v2_cloudfront_prefix: ((domain_broker_v2_cloudfront_prefix_production))
      TF_VAR_lets_encrypt_hosted_zone: ((lets_encrypt_hosted_zone_production))
      TF_VAR_external_domain_broker_cloudfront_prefix: ((external_domain_broker_cloudfront_prefix_production))
      TF_VAR_external_domain_broker_hosted_zone: ((external_domain_broker_hosted_zone_production))
      TF_VAR_external_domain_broker_username: ((external_domain_broker_username_production))
  - *notify-slack

- name: bootstrap-external-production
  plan:
  - in_parallel:
    - get: pipeline-tasks
    - get: cg-provision-repo
      resource: cg-provision-repo-master
      passed: [plan-bootstrap-external-production]
  - task: create-update-external-production
    file: pipeline-tasks/terraform-apply.yml
    input_mapping: {terraform-templates: cg-provision-repo}
    params:
      <<: *external-production-params
      TERRAFORM_ACTION: apply
  - task: terraform-state-to-yaml
    file: pipeline-tasks/terraform12-state-to-yaml.yml
    params:
      STATE_FILE: terraform.tfstate
  - put: terraform-yaml-external-production
    params:
      file: terraform-yaml/state.yml

- name: plan-bootstrap-external-easta
  plan:
  - in_parallel:
    - get: pipeline-tasks
    - get: cg-provision-repo
      resource: cg-provision-repo-easta
      trigger: true
    - get: plan-timer
      trigger: true
  - task: plan-update-external-easta
    file: pipeline-tasks/terraform-apply.yml
    input_mapping: {terraform-templates: cg-provision-repo}
    params: &external-easta-params
      TERRAFORM_ACTION: plan
      STACK_NAME: external-easta
      TEMPLATE_SUBDIR: terraform/stacks/external
      S3_TFSTATE_BUCKET: ((aws_external_s3_tfstate_bucket))
      AWS_ACCESS_KEY_ID: ((aws_external_access_key_id))
      AWS_SECRET_ACCESS_KEY: ((aws_external_secret_access_key))
      AWS_DEFAULT_REGION: ((aws_external_region))
      TF_VAR_stack_description: easta
      TF_VAR_aws_default_region: ((aws_external_region))
      # Do not copy the pattern below.  You should not need separate variables
      # for staging/prod.  Instead, use ${var.stack_name} in your .tf and get
      # IDs from `data` resources.
      TF_VAR_cdn_broker_username: ((cdn_broker_username_easta))
      TF_VAR_cdn_broker_bucket: ((cdn_broker_bucket_easta))
      TF_VAR_cdn_broker_cloudfront_prefix: ((cdn_broker_cloudfront_prefix_easta))
      TF_VAR_cdn_broker_hosted_zone: ((cdn_broker_hosted_zone_easta))
      TF_VAR_domain_broker_v2_username: ((domain_broker_v2_username_easta))
      TF_VAR_domain_broker_v2_bucket: ((domain_broker_v2_bucket_easta))
      TF_VAR_domain_broker_v2_cloudfront_prefix: ((domain_broker_v2_cloudfront_prefix_easta))
      TF_VAR_lets_encrypt_hosted_zone: ((lets_encrypt_hosted_zone_easta))
      TF_VAR_external_domain_broker_cloudfront_prefix: ((external_domain_broker_cloudfront_prefix_easta))
      TF_VAR_external_domain_broker_hosted_zone: ((external_domain_broker_hosted_zone_easta))
      TF_VAR_external_domain_broker_username: ((external_domain_broker_username_easta))
  - *notify-slack

- name: bootstrap-external-easta
  plan:
  - in_parallel:
    - get: pipeline-tasks
    - get: cg-provision-repo
      resource: cg-provision-repo-easta
      passed: [plan-bootstrap-external-easta]
  - task: create-update-external-easta
    file: pipeline-tasks/terraform-apply.yml
    input_mapping: {terraform-templates: cg-provision-repo}
    params:
      <<: *external-easta-params
      TERRAFORM_ACTION: apply
  - task: terraform-state-to-yaml
    file: pipeline-tasks/terraform12-state-to-yaml.yml
    params:
      STATE_FILE: terraform.tfstate
  - put: terraform-yaml-external-easta
    params:
      file: terraform-yaml/state.yml

- name: plan-bootstrap-external-eastb
  plan:
  - in_parallel:
    - get: pipeline-tasks
    - get: cg-provision-repo
      resource: cg-provision-repo-easta
      trigger: true
    - get: plan-timer
      trigger: true
  - task: plan-update-external-eastb
    file: pipeline-tasks/terraform-apply.yml
    input_mapping: {terraform-templates: cg-provision-repo}
    params: &external-eastb-params
      TERRAFORM_ACTION: plan
      STACK_NAME: external-eastb
      TEMPLATE_SUBDIR: terraform/stacks/external
      S3_TFSTATE_BUCKET: ((aws_external_s3_tfstate_bucket))
      AWS_ACCESS_KEY_ID: ((aws_external_access_key_id))
      AWS_SECRET_ACCESS_KEY: ((aws_external_secret_access_key))
      AWS_DEFAULT_REGION: ((aws_external_region))
      TF_VAR_stack_description: eastb
      TF_VAR_aws_default_region: ((aws_external_region))
      # Do not copy the pattern below.  You should not need separate variables
      # for staging/prod.  Instead, use ${var.stack_name} in your .tf and get
      # IDs from `data` resources.
      TF_VAR_cdn_broker_username: ((cdn_broker_username_eastb))
      TF_VAR_cdn_broker_bucket: ((cdn_broker_bucket_eastb))
      TF_VAR_cdn_broker_cloudfront_prefix: ((cdn_broker_cloudfront_prefix_eastb))
      TF_VAR_cdn_broker_hosted_zone: ((cdn_broker_hosted_zone_eastb))
      TF_VAR_domain_broker_v2_username: ((domain_broker_v2_username_eastb))
      TF_VAR_domain_broker_v2_bucket: ((domain_broker_v2_bucket_eastb))
      TF_VAR_domain_broker_v2_cloudfront_prefix: ((domain_broker_v2_cloudfront_prefix_eastb))
      TF_VAR_lets_encrypt_hosted_zone: ((lets_encrypt_hosted_zone_eastb))
      TF_VAR_external_domain_broker_cloudfront_prefix: ((external_domain_broker_cloudfront_prefix_eastb))
      TF_VAR_external_domain_broker_hosted_zone: ((external_domain_broker_hosted_zone_eastb))
      TF_VAR_external_domain_broker_username: ((external_domain_broker_username_eastb))
  - *notify-slack

- name: bootstrap-external-eastb
  plan:
  - in_parallel:
    - get: pipeline-tasks
    - get: cg-provision-repo
      resource: cg-provision-repo-easta
      passed: [plan-bootstrap-external-eastb]
  - task: create-update-external-eastb
    file: pipeline-tasks/terraform-apply.yml
    input_mapping: {terraform-templates: cg-provision-repo}
    params:
      <<: *external-eastb-params
      TERRAFORM_ACTION: apply
  - task: terraform-state-to-yaml
    file: pipeline-tasks/terraform12-state-to-yaml.yml
    params:
      STATE_FILE: terraform.tfstate
  - put: terraform-yaml-external-eastb
    params:
      file: terraform-yaml/state.yml

- name: plan-bootstrap-external-westb
  plan:
  - in_parallel:
    - get: pipeline-tasks
    - get: cg-provision-repo
      resource: cg-provision-repo-easta
      trigger: true
    - get: plan-timer
      trigger: true
  - task: plan-update-external-westb
    file: pipeline-tasks/terraform-apply.yml
    input_mapping: {terraform-templates: cg-provision-repo}
    params: &external-westb-params
      TERRAFORM_ACTION: plan
      STACK_NAME: external-westb
      TEMPLATE_SUBDIR: terraform/stacks/external
      S3_TFSTATE_BUCKET: ((aws_external_s3_tfstate_bucket))
      AWS_ACCESS_KEY_ID: ((aws_external_access_key_id))
      AWS_SECRET_ACCESS_KEY: ((aws_external_secret_access_key))
      AWS_DEFAULT_REGION: ((aws_external_region))
      TF_VAR_stack_description: westb
      TF_VAR_aws_default_region: ((aws_external_region))
      # Do not copy the pattern below.  You should not need separate variables
      # for staging/prod.  Instead, use ${var.stack_name} in your .tf and get
      # IDs from `data` resources.
      TF_VAR_cdn_broker_username: ((cdn_broker_username_westb))
      TF_VAR_cdn_broker_bucket: ((cdn_broker_bucket_westb))
      TF_VAR_cdn_broker_cloudfront_prefix: ((cdn_broker_cloudfront_prefix_westb))
      TF_VAR_cdn_broker_hosted_zone: ((cdn_broker_hosted_zone_westb))
      TF_VAR_domain_broker_v2_username: ((domain_broker_v2_username_westb))
      TF_VAR_domain_broker_v2_bucket: ((domain_broker_v2_bucket_westb))
      TF_VAR_domain_broker_v2_cloudfront_prefix: ((domain_broker_v2_cloudfront_prefix_westb))
      TF_VAR_lets_encrypt_hosted_zone: ((lets_encrypt_hosted_zone_westb))
      TF_VAR_external_domain_broker_cloudfront_prefix: ((external_domain_broker_cloudfront_prefix_westb))
      TF_VAR_external_domain_broker_hosted_zone: ((external_domain_broker_hosted_zone_westb))
      TF_VAR_external_domain_broker_username: ((external_domain_broker_username_westb))
  - *notify-slack

- name: bootstrap-external-westb
  plan:
  - in_parallel:
    - get: pipeline-tasks
    - get: cg-provision-repo
      resource: cg-provision-repo-easta
      passed: [plan-bootstrap-external-westb]
  - task: create-update-external-westb
    file: pipeline-tasks/terraform-apply.yml
    input_mapping: {terraform-templates: cg-provision-repo}
    params:
      <<: *external-westb-params
      TERRAFORM_ACTION: apply
  - task: terraform-state-to-yaml
    file: pipeline-tasks/terraform12-state-to-yaml.yml
    params:
      STATE_FILE: terraform.tfstate
  - put: terraform-yaml-external-westb
    params:
      file: terraform-yaml/state.yml

- name: plan-bootstrap-external-westc
  plan:
  - in_parallel:
    - get: pipeline-tasks
    - get: cg-provision-repo
      resource: cg-provision-repo-easta
      trigger: true
    - get: plan-timer
      trigger: true
  - task: plan-update-external-westc
    file: pipeline-tasks/terraform-apply.yml
    input_mapping: {terraform-templates: cg-provision-repo}
    params: &external-westc-params
      TERRAFORM_ACTION: plan
      STACK_NAME: external-westc
      TEMPLATE_SUBDIR: terraform/stacks/external
      S3_TFSTATE_BUCKET: ((aws_external_s3_tfstate_bucket))
      AWS_ACCESS_KEY_ID: ((aws_external_access_key_id))
      AWS_SECRET_ACCESS_KEY: ((aws_external_secret_access_key))
      AWS_DEFAULT_REGION: ((aws_external_region))
      TF_VAR_stack_description: westc
      TF_VAR_aws_default_region: ((aws_external_region))
      # Do not copy the pattern below.  You should not need separate variables
      # for staging/prod.  Instead, use ${var.stack_name} in your .tf and get
      # IDs from `data` resources.
      TF_VAR_cdn_broker_username: ((cdn_broker_username_westc))
      TF_VAR_cdn_broker_bucket: ((cdn_broker_bucket_westc))
      TF_VAR_cdn_broker_cloudfront_prefix: ((cdn_broker_cloudfront_prefix_westc))
      TF_VAR_cdn_broker_hosted_zone: ((cdn_broker_hosted_zone_westc))
      TF_VAR_domain_broker_v2_username: ((domain_broker_v2_username_westc))
      TF_VAR_domain_broker_v2_bucket: ((domain_broker_v2_bucket_westc))
      TF_VAR_domain_broker_v2_cloudfront_prefix: ((domain_broker_v2_cloudfront_prefix_westc))
      TF_VAR_lets_encrypt_hosted_zone: ((lets_encrypt_hosted_zone_westc))
      TF_VAR_external_domain_broker_cloudfront_prefix: ((external_domain_broker_cloudfront_prefix_westc))
      TF_VAR_external_domain_broker_hosted_zone: ((external_domain_broker_hosted_zone_westc))
      TF_VAR_external_domain_broker_username: ((external_domain_broker_username_westc))
  - *notify-slack

- name: bootstrap-external-westc
  plan:
  - in_parallel:
    - get: pipeline-tasks
    - get: cg-provision-repo
      resource: cg-provision-repo-easta
      passed: [plan-bootstrap-external-westc]
  - task: create-update-external-westc
    file: pipeline-tasks/terraform-apply.yml
    input_mapping: {terraform-templates: cg-provision-repo}
    params:
      <<: *external-westc-params
      TERRAFORM_ACTION: apply
  - task: terraform-state-to-yaml
    file: pipeline-tasks/terraform12-state-to-yaml.yml
    params:
      STATE_FILE: terraform.tfstate
  - put: terraform-yaml-external-westc
    params:
      file: terraform-yaml/state.yml

- name: plan-dns
  plan:
  - in_parallel:
    - get: pipeline-tasks
    - get: cg-provision-repo
      resource: cg-provision-repo-master
      trigger: true
    - get: plan-timer
      trigger: true
  - task: plan-dns
    file: pipeline-tasks/terraform-apply.yml
    input_mapping: {terraform-templates: cg-provision-repo}
    params: &dns-params
      TERRAFORM_ACTION: plan
      STACK_NAME: dns
      TEMPLATE_SUBDIR: terraform/stacks/dns
      S3_TFSTATE_BUCKET: ((aws_external_s3_tfstate_bucket))
      TF_VAR_aws_access_key: ((aws_external_access_key_id))
      TF_VAR_aws_secret_key: ((aws_external_secret_access_key))
      TF_VAR_aws_region: ((aws_external_region))
      TF_VAR_remote_state_bucket: ((aws_s3_tfstate_bucket))
      TF_VAR_remote_state_region: ((aws_default_region))
      TF_VAR_tooling_stack_name: tooling
      TF_VAR_production_stack_name: production
      TF_VAR_staging_stack_name: staging
      TF_VAR_development_stack_name: development
  - *notify-slack

- name: apply-dns
  plan:
  - in_parallel:
    - get: pipeline-tasks
    - get: cg-provision-repo
      resource: cg-provision-repo-master
      passed: [plan-dns]
  - task: create-update-dns
    file: pipeline-tasks/terraform-apply.yml
    input_mapping: {terraform-templates: cg-provision-repo}
    params:
      <<: *dns-params
      TERRAFORM_ACTION: apply

- name: plan-bootstrap-tooling
  plan:
  - in_parallel:
    - get: pipeline-tasks
    - get: cg-provision-repo
      resource: cg-provision-repo-master
      trigger: true
    - get: plan-timer
      trigger: true
  - task: plan-update-tooling
    tags: [iaas]
    file: pipeline-tasks/terraform-apply.yml
    input_mapping: {terraform-templates: cg-provision-repo}
    params: &tooling-params
      TERRAFORM_ACTION: plan
      STACK_NAME: tooling
      TEMPLATE_SUBDIR: terraform/stacks/tooling
      S3_TFSTATE_BUCKET: ((aws_s3_tfstate_bucket))
      AWS_DEFAULT_REGION: ((aws_default_region))
      TF_VAR_aws_default_region: ((aws_default_region))
      TF_VAR_rds_password: ((tooling_rds_password))
      # Enable for database upgrades:
      #TF_VAR_rds_apply_immediately: "true"
      #TF_VAR_rds_allow_major_version_upgrade: "true"
      TF_VAR_credhub_rds_password: ((tooling_credhub_rds_password))
      TF_VAR_concourse_prod_rds_password: ((concourse_prod_rds_password))
      TF_VAR_concourse_staging_rds_password: ((concourse_staging_rds_password))
      TF_VAR_credhub_prod_rds_password: ((credhub_prod_rds_password))
      TF_VAR_credhub_staging_rds_password: ((credhub_staging_rds_password))
      TF_VAR_opsuaa_rds_password: ((opsuaa_rds_password))
      TF_VAR_remote_state_bucket: ((aws_s3_tfstate_bucket))
      TF_VAR_cloudtrail_bucket: ((aws_s3_cloudtrail_bucket))
      TF_VAR_vpc_cidr: ((tooling_vpc_cidr))
      TF_VAR_smtp_ingress_cidr_blocks: '["((staging_private_cidr_1))", "((staging_private_cidr_2))", "((production_private_cidr_1))", "((production_private_cidr_2))"]'
      TF_VAR_restricted_ingress_web_cidrs: ((tooling_restricted_ingress_web_cidrs))
      TF_VAR_restricted_ingress_web_ipv6_cidrs: ((tooling_restricted_ingress_web_ipv6_cidrs))
      TF_VAR_blobstore_bucket_name: bosh-tooling-blobstore
      TF_VAR_concourse_production_hosts: '["ci.fr.cloud.gov"]'
      TF_VAR_concourse_staging_hosts: '["ci.fr-stage.cloud.gov"]'
      TF_VAR_credhub_production_hosts: '["credhub.fr.cloud.gov"]'
      TF_VAR_credhub_staging_hosts: '["credhub.fr-stage.cloud.gov"]'
      TF_VAR_monitoring_production_hosts: '["prometheus.fr.cloud.gov", "alertmanager.fr.cloud.gov", "grafana.fr.cloud.gov"]'
      TF_VAR_monitoring_staging_hosts: '["prometheus.fr-stage.cloud.gov", "alertmanager.fr-stage.cloud.gov", "grafana.fr-stage.cloud.gov"]'
      TF_VAR_nessus_hosts: '["nessus.fr.cloud.gov"]'
      TF_VAR_wildcard_staging_certificate_name_prefix: star.fr-stage.cloud.gov
      TF_VAR_wildcard_production_certificate_name_prefix: star.fr.cloud.gov
      TF_VAR_concourse_varz_bucket: ((concourse_varz_bucket))
      TF_VAR_oidc_client: ((tooling_oidc_client))
      TF_VAR_oidc_client_secret: ((tooling_oidc_client_secret))
      TF_VAR_payer_account_id: ((payer_account_id))
  - *notify-slack

- name: bootstrap-tooling
  plan:
  - in_parallel:
    - get: pipeline-tasks
    - get: cg-provision-repo
      resource: cg-provision-repo-master
      passed: [plan-bootstrap-tooling]
  - task: create-update-tooling
    tags: [iaas]
    file: pipeline-tasks/terraform-apply.yml
    input_mapping: {terraform-templates: cg-provision-repo}
    params:
      <<: *tooling-params
      TERRAFORM_ACTION: apply
  - in_parallel:
    - task: init-bosh-db
      config:
        platform: linux
        image_resource:
          type: docker-image
          source:
            repository: 18fgsa/concourse-task
        inputs:
        - name: cg-provision-repo
        - name: terraform-state
        params:
          STATE_FILE_PATH: terraform-state/terraform.tfstate
        run:
          path: sh
          args:
          - -e
          - -c
          - cg-provision-repo/ci/scripts/update-bosh-db.sh
    - task: init-opsuaa-db
      config:
        platform: linux
        image_resource:
          type: docker-image
          source:
            repository: 18fgsa/concourse-task
        inputs:
        - name: cg-provision-repo
        - name: terraform-state
        params:
          STATE_FILE_PATH: terraform-state/terraform.tfstate
        run:
          path: sh
          args:
          - -e
          - -c
          - cg-provision-repo/ci/scripts/update-opsuaa-db.sh
    - do:
      - task: terraform-state-to-yaml
        file: pipeline-tasks/terraform12-state-to-yaml.yml
        params:
          STATE_FILE: terraform.tfstate
      - put: terraform-yaml-tooling
        params:
          file: terraform-yaml/state.yml

- name: plan-bootstrap-master-east
  plan:
  - in_parallel:
    - get: pipeline-tasks
    - get: cg-provision-repo
      resource: cg-provision-repo-easta
      trigger: true
    - get: plan-timer
      trigger: true
  - task: plan-update-tooling
    tags: [iaas]
    file: pipeline-tasks/terraform-apply.yml
    input_mapping: {terraform-templates: cg-provision-repo}
    params: &master-east-params
      TERRAFORM_ACTION: plan
      STACK_NAME: master-east
      TEMPLATE_SUBDIR: terraform/stacks/regionalmasterbosh
      S3_TFSTATE_BUCKET: ((aws_s3_tfstate_bucket))
      AWS_DEFAULT_REGION: ((aws_default_region)) # this needs to stay as default, since tf still runs from the default
      TF_VAR_aws_default_region: ((aws_east_region)) # this controls where we actually connect to
      TF_VAR_assume_arn: ((master_east_assume_arn))
      TF_VAR_rds_password: ((master_east_rds_password))
      TF_VAR_rds_instance_type: ((master_east_rds_instance_type))
      # Enable for database upgrades:
      #TF_VAR_rds_apply_immediately: "true"
      #TF_VAR_rds_allow_major_version_upgrade: "true"
      TF_VAR_credhub_rds_password: ((master_east_credhub_rds_password))
      TF_VAR_opsuaa_rds_password: ((east_opsuaa_rds_password))
      TF_VAR_remote_state_bucket: ((aws_s3_tfstate_bucket))
      TF_VAR_cloudtrail_bucket: ((aws_s3_cloudtrail_bucket_master_east))
      TF_VAR_vpc_cidr: ((master_east_vpc_cidr))
      TF_VAR_smtp_ingress_cidr_blocks: '["((easta_private_cidr_1))", "((easta_private_cidr_2))", "((eastb_private_cidr_1))", "((eastb_private_cidr_2))"]'
      TF_VAR_restricted_ingress_web_cidrs: ((master_east_restricted_ingress_web_cidrs))
      TF_VAR_restricted_ingress_web_ipv6_cidrs: ((master_east_restricted_ingress_web_ipv6_cidrs))
      TF_VAR_blobstore_bucket_name: bosh-master-east-blobstore
      TF_VAR_bosh_release_bucket: cloud-gov-bosh-releases-east
      TF_VAR_log_bucket_name: cg-elb-logs-tooling-east
      TF_VAR_monitoring_production_hosts: '["prometheus.fr.east.cloud.gov", "alertmanager.fr.east.cloud.gov", "grafana.fr.east.cloud.gov"]'
      TF_VAR_nessus_hosts: '["nessus.fr.east.cloud.gov"]'
      TF_VAR_wildcard_production_certificate_name_prefix: star.fr.east.cloud.gov
      TF_VAR_concourse_varz_bucket: ((concourse_varz_bucket))
      TF_VAR_oidc_client: ((master_east_oidc_client))
      TF_VAR_oidc_client_secret: ((master_east_oidc_client_secret))
      TF_VAR_opslogin_hostname: "opslogin.fr.east.cloud.gov"
      TF_VAR_stack_description: master-east
      TF_VAR_bosh_default_ssh_public_key: "((master_east_bosh_ssh_public_key))"
  - *notify-slack

- name: bootstrap-master-east
  plan:
  - in_parallel:
    - get: pipeline-tasks
    - get: cg-provision-repo
      resource: cg-provision-repo-easta
      passed: [plan-bootstrap-master-east]
  - task: create-update-master-east
    tags: [iaas]
    file: pipeline-tasks/terraform-apply.yml
    input_mapping: {terraform-templates: cg-provision-repo}
    params:
      <<: *master-east-params
      TERRAFORM_ACTION: apply
  - in_parallel:
    - task: init-bosh-db
      config:
        platform: linux
        image_resource:
          type: docker-image
          source:
            repository: 18fgsa/concourse-task
        inputs:
        - name: cg-provision-repo
        - name: terraform-state
        params:
          STATE_FILE_PATH: terraform-state/terraform.tfstate
        run:
          path: sh
          args:
          - -e
          - -c
          - cg-provision-repo/ci/scripts/update-bosh-db.sh
    - task: init-opsuaa-db
      config:
        platform: linux
        image_resource:
          type: docker-image
          source:
            repository: 18fgsa/concourse-task
        inputs:
        - name: cg-provision-repo
        - name: terraform-state
        params:
          STATE_FILE_PATH: terraform-state/terraform.tfstate
        run:
          path: sh
          args:
          - -e
          - -c
          - cg-provision-repo/ci/scripts/update-opsuaa-db.sh
    - do:
      - task: terraform-state-to-yaml
        file: pipeline-tasks/terraform12-state-to-yaml.yml
        params:
          STATE_FILE: terraform.tfstate
      - put: terraform-yaml-master-east
        params:
          file: terraform-yaml/state.yml

- name: plan-bootstrap-master-west
  plan:
  - in_parallel:
    - get: pipeline-tasks
    - get: cg-provision-repo
      resource: cg-provision-repo-easta
      trigger: true
    - get: plan-timer
      trigger: true
  - task: plan-update-tooling
    tags: [iaas]
    file: pipeline-tasks/terraform-apply.yml
    input_mapping: {terraform-templates: cg-provision-repo}
    params: &master-west-params
      TERRAFORM_ACTION: plan
      STACK_NAME: master-west
      TEMPLATE_SUBDIR: terraform/stacks/regionalmasterbosh
      S3_TFSTATE_BUCKET: ((aws_s3_tfstate_bucket))
      AWS_DEFAULT_REGION: ((aws_default_region)) # this needs to stay as default, since tf still runs from the default
      TF_VAR_aws_default_region: ((aws_master_west_region)) # this controls where we actually connect to
      TF_VAR_assume_arn: ((master_west_assume_arn))
      TF_VAR_rds_password: ((master_west_rds_password))
      TF_VAR_rds_instance_type: ((master_west_rds_instance_type))
      # Enable for database upgrades:
      #TF_VAR_rds_apply_immediately: "true"
      #TF_VAR_rds_allow_major_version_upgrade: "true"
      TF_VAR_credhub_rds_password: ((master_west_credhub_rds_password))
      TF_VAR_opsuaa_rds_password: ((west_opsuaa_rds_password))
      TF_VAR_remote_state_bucket: ((aws_s3_tfstate_bucket))
      TF_VAR_cloudtrail_bucket: ((aws_s3_cloudtrail_bucket_master_west))
      TF_VAR_vpc_cidr: ((master_west_vpc_cidr))
      TF_VAR_smtp_ingress_cidr_blocks: '["((westb_private_cidr_1))", "((westb_private_cidr_2))", "((westc_private_cidr_1))", "((westc_private_cidr_2))"]'
      TF_VAR_restricted_ingress_web_cidrs: ((master_west_restricted_ingress_web_cidrs))
      TF_VAR_restricted_ingress_web_ipv6_cidrs: ((master_west_restricted_ingress_web_ipv6_cidrs))
      TF_VAR_blobstore_bucket_name: bosh-master-west-blobstore
      TF_VAR_bosh_release_bucket: cloud-gov-bosh-releases-west
      TF_VAR_log_bucket_name: cg-elb-logs-tooling-west
      TF_VAR_monitoring_production_hosts: '["prometheus.fr.west.cloud.gov", "alertmanager.fr.west.cloud.gov", "grafana.fr.west.cloud.gov"]'
      TF_VAR_nessus_hosts: '["nessus.fr.west.cloud.gov"]'
      TF_VAR_wildcard_production_certificate_name_prefix: star.fr.west.cloud.gov
      TF_VAR_concourse_varz_bucket: ((concourse_varz_bucket))
      TF_VAR_oidc_client: ((master_west_oidc_client))
      TF_VAR_oidc_client_secret: ((master_west_oidc_client_secret))
      TF_VAR_opslogin_hostname: "opslogin.fr.west.cloud.gov"
      TF_VAR_stack_description: master-west
      TF_VAR_bosh_default_ssh_public_key: "((master_west_bosh_ssh_public_key))"

  - *notify-slack

- name: bootstrap-master-west
  plan:
  - in_parallel:
    - get: pipeline-tasks
    - get: cg-provision-repo
      resource: cg-provision-repo-easta
      passed: [plan-bootstrap-master-west]
  - task: create-update-master-west
    tags: [iaas]
    file: pipeline-tasks/terraform-apply.yml
    input_mapping: {terraform-templates: cg-provision-repo}
    params:
      <<: *master-west-params
      TERRAFORM_ACTION: apply
  - in_parallel:
    - task: init-bosh-db
      config:
        platform: linux
        image_resource:
          type: docker-image
          source:
            repository: 18fgsa/concourse-task
        inputs:
        - name: cg-provision-repo
        - name: terraform-state
        params:
          STATE_FILE_PATH: terraform-state/terraform.tfstate
        run:
          path: sh
          args:
          - -e
          - -c
          - cg-provision-repo/ci/scripts/update-bosh-db.sh
    - task: init-opsuaa-db
      config:
        platform: linux
        image_resource:
          type: docker-image
          source:
            repository: 18fgsa/concourse-task
        inputs:
        - name: cg-provision-repo
        - name: terraform-state
        params:
          STATE_FILE_PATH: terraform-state/terraform.tfstate
        run:
          path: sh
          args:
          - -e
          - -c
          - cg-provision-repo/ci/scripts/update-opsuaa-db.sh
    - do:
      - task: terraform-state-to-yaml
        file: pipeline-tasks/terraform12-state-to-yaml.yml
        params:
          STATE_FILE: terraform.tfstate
      - put: terraform-yaml-master-west
        params:
          file: terraform-yaml/state.yml

- name: plan-bootstrap-development
  plan:
  - in_parallel:
    - get: pipeline-tasks
    - get: cg-provision-repo
      resource: cg-provision-repo-development
      trigger: true
    - get: plan-timer
      trigger: true
  - task: plan-update-development
    tags: [iaas]
    file: pipeline-tasks/terraform-apply.yml
    input_mapping: {terraform-templates: cg-provision-repo}
    params: &development-params
      TERRAFORM_ACTION: plan
      STACK_NAME: development
      TEMPLATE_SUBDIR: terraform/stacks/main
      S3_TFSTATE_BUCKET: ((aws_s3_tfstate_bucket))
      AWS_DEFAULT_REGION: ((aws_default_region))
      TF_VAR_stack_description: development
      TF_VAR_force_restricted_network: "yes"
      # Do not copy the pattern below.  You should not need separate variables
      # for staging/prod.  Instead, use ${var.stack_name} in your .tf and get
      # IDs from `data` resources.
      TF_VAR_rds_password: ((development_rds_password))
      TF_VAR_rds_db_size: ((development_rds_db_size))
      # Enable for database upgrades:
      #TF_VAR_rds_apply_immediately: "true"
      #TF_VAR_rds_allow_major_version_upgrade: "true"
      TF_VAR_rds_multi_az: "false"
      TF_VAR_remote_state_bucket: ((aws_s3_tfstate_bucket))
      TF_VAR_vpc_cidr: ((development_vpc_cidr))
      TF_VAR_cf_rds_password: ((development_cf_rds_password))
      TF_VAR_credhub_rds_password: ((development_credhub_rds_password))
      TF_VAR_restricted_ingress_web_cidrs: ((development_restricted_ingress_web_cidrs))
      TF_VAR_restricted_ingress_web_ipv6_cidrs: ((development_restricted_ingress_web_ipv6_cidrs))
      TF_VAR_wildcard_certificate_name_prefix: star.dev.us-gov-west-1.aws-us-gov.cloud.gov
      TF_VAR_wildcard_apps_certificate_name_prefix: star.dev.us-gov-west-1.aws-us-gov.cloud.gov
      TF_VAR_stack_prefix: cf-development
      TF_VAR_bucket_prefix: development-cg
      TF_VAR_blobstore_bucket_name: bosh-development-blobstore
      TF_VAR_upstream_blobstore_bucket_name: bosh-tooling-blobstore
      TF_VAR_admin_hosts: '["admin.dev.us-gov-west-1.aws-us-gov.cloud.gov"]'
      TF_VAR_shibboleth_hosts: '["idp.dev.us-gov-west-1.aws-us-gov.cloud.gov"]'
      TF_VAR_platform_kibana_hosts: '["logs-platform.dev.us-gov-west-1.aws-us-gov.cloud.gov"]'
      TF_VAR_domains_broker_alb_count: "2"
      TF_VAR_domain_broker_v2_alb_count: "2"
      TF_VAR_challenge_bucket: development-domains-broker-challenge
      TF_VAR_iam_cert_prefix: "/domains/development/*"
      TF_VAR_alb_prefix: "development-domains-*"
      TF_VAR_domains_broker_rds_username: ((development_domains_broker_rds_username))
      TF_VAR_domains_broker_rds_password: ((development_domains_broker_rds_password))
      TF_VAR_domain_broker_v2_rds_username: ((development_domain_broker_v2_rds_username))
      TF_VAR_domain_broker_v2_rds_password: ((development_domain_broker_v2_rds_password))
      # Not used in dev
      TF_VAR_wildcard_pages_staging_certificate_name_prefix: star.pages-staging.cloud.gov
      TF_VAR_wildcard_sites_pages_staging_certificate_name_prefix: star.sites.pages-staging.cloud.gov
  - *notify-slack

- name: bootstrap-development
  plan:
  - in_parallel:
    - get: pipeline-tasks
    - get: cg-provision-repo
      resource: cg-provision-repo-development
      passed: [plan-bootstrap-development]
  - task: create-update-development
    tags: [iaas]
    file: pipeline-tasks/terraform-apply.yml
    input_mapping: {terraform-templates: cg-provision-repo}
    params:
      <<: *development-params
      TERRAFORM_ACTION: apply
  - in_parallel:
    - do:
      - task: init-bosh-db
        config:
          platform: linux
          image_resource:
            type: docker-image
            source:
              repository: 18fgsa/concourse-task
          inputs:
          - name: cg-provision-repo
          - name: terraform-state
          params:
            STATE_FILE_PATH: terraform-state/terraform.tfstate
          run:
            path: sh
            args:
            - -e
            - -c
            - cg-provision-repo/ci/scripts/update-bosh-db.sh
      - task: init-cf-db
        config:
          platform: linux
          image_resource:
            type: docker-image
            source:
              repository: 18fgsa/concourse-task
          inputs:
          - name: cg-provision-repo
          - name: terraform-state
          params:
            STATE_FILE_PATH: terraform-state/terraform.tfstate
          run:
            path: sh
            args:
            - -e
            - -c
            - cg-provision-repo/ci/scripts/update-cf-db.sh
    - do:
      - task: terraform-state-to-yaml
        file: pipeline-tasks/terraform12-state-to-yaml.yml
        params:
          STATE_FILE: terraform.tfstate
      - put: terraform-yaml-development
        params:
          file: terraform-yaml/state.yml

- name: plan-bootstrap-staging
  plan:
  - in_parallel:
    - get: pipeline-tasks
    - get: cg-provision-repo
      resource: cg-provision-repo-master
      trigger: true
    - get: plan-timer
      trigger: true
  - task: plan-update-staging
    tags: [iaas]
    file: pipeline-tasks/terraform-apply.yml
    input_mapping: {terraform-templates: cg-provision-repo}
    params: &staging-params
      TERRAFORM_ACTION: plan
      STACK_NAME: staging
      TEMPLATE_SUBDIR: terraform/stacks/main
      S3_TFSTATE_BUCKET: ((aws_s3_tfstate_bucket))
      AWS_DEFAULT_REGION: ((aws_default_region))
      TF_VAR_stack_description: staging
      TF_VAR_force_restricted_network: "no"
      # Do not copy the pattern below.  You should not need separate variables
      # for staging/prod.  Instead, use ${var.stack_name} in your .tf and get
      # IDs from `data` resources.
      TF_VAR_rds_password: ((staging_rds_password))
      TF_VAR_rds_db_size: ((staging_rds_db_size))
      # Enable for database upgrades:
      #TF_VAR_rds_apply_immediately: "true"
      #TF_VAR_rds_allow_major_version_upgrade: "true"
      TF_VAR_credhub_rds_password: ((staging_credhub_rds_password))
      TF_VAR_remote_state_bucket: ((aws_s3_tfstate_bucket))
      TF_VAR_vpc_cidr: ((staging_vpc_cidr))
      TF_VAR_cf_rds_password: ((staging_cf_rds_password))
      TF_VAR_restricted_ingress_web_cidrs: ((staging_restricted_ingress_web_cidrs))
      TF_VAR_restricted_ingress_web_ipv6_cidrs: ((staging_restricted_ingress_web_ipv6_cidrs))
      TF_VAR_wildcard_certificate_name_prefix: star.fr-stage.cloud.gov
      TF_VAR_wildcard_apps_certificate_name_prefix: star.fr-stage.cloud.gov
      TF_VAR_stack_prefix: cf-staging
      TF_VAR_bucket_prefix: staging-cg
      TF_VAR_blobstore_bucket_name: bosh-staging-blobstore
      TF_VAR_upstream_blobstore_bucket_name: bosh-tooling-blobstore
      TF_VAR_admin_hosts: '["admin.fr-stage.cloud.gov"]'
      TF_VAR_shibboleth_hosts: '["idp.fr-stage.cloud.gov"]'
      TF_VAR_platform_kibana_hosts: '["logs-platform.fr-stage.cloud.gov"]'
      TF_VAR_domains_broker_alb_count: "2"
      TF_VAR_domain_broker_v2_alb_count: "2"
      TF_VAR_challenge_bucket: staging-domains-broker-challenge
      TF_VAR_iam_cert_prefix: "/domains/staging/*"
      TF_VAR_alb_prefix: "staging-domains-*"
      TF_VAR_domains_broker_rds_username: ((staging_domains_broker_rds_username))
      TF_VAR_domains_broker_rds_password: ((staging_domains_broker_rds_password))
      TF_VAR_domain_broker_v2_rds_username: ((staging_domain_broker_v2_rds_username))
      TF_VAR_domain_broker_v2_rds_password: ((staging_domain_broker_v2_rds_password))
      # Not used in staging
      TF_VAR_wildcard_pages_staging_certificate_name_prefix: star.pages-staging.cloud.gov
      TF_VAR_wildcard_sites_pages_staging_certificate_name_prefix: star.sites.pages-staging.cloud.gov
  - *notify-slack

- name: bootstrap-staging
  plan:
  - in_parallel:
    - get: pipeline-tasks
    - get: cg-provision-repo
      resource: cg-provision-repo-master
      passed: [plan-bootstrap-staging]
  - task: create-update-staging
    tags: [iaas]
    file: pipeline-tasks/terraform-apply.yml
    input_mapping: {terraform-templates: cg-provision-repo}
    params:
      <<: *staging-params
      TERRAFORM_ACTION: apply
  - in_parallel:
    - do:
      - task: init-bosh-db
        config:
          platform: linux
          image_resource:
            type: docker-image
            source:
              repository: 18fgsa/concourse-task
          inputs:
          - name: cg-provision-repo
          - name: terraform-state
          params:
            STATE_FILE_PATH: terraform-state/terraform.tfstate
          run:
            path: sh
            args:
            - -e
            - -c
            - cg-provision-repo/ci/scripts/update-bosh-db.sh
      - task: init-cf-db
        config:
          platform: linux
          image_resource:
            type: docker-image
            source:
              repository: 18fgsa/concourse-task
          inputs:
          - name: cg-provision-repo
          - name: terraform-state
          params:
            STATE_FILE_PATH: terraform-state/terraform.tfstate
          run:
            path: sh
            args:
            - -e
            - -c
            - cg-provision-repo/ci/scripts/update-cf-db.sh
    - do:
      - task: terraform-state-to-yaml
        file: pipeline-tasks/terraform12-state-to-yaml.yml
        params:
          STATE_FILE: terraform.tfstate
      - put: terraform-yaml-staging
        params:
          file: terraform-yaml/state.yml

- name: plan-bootstrap-production
  plan:
  - in_parallel:
    - get: pipeline-tasks
    - get: cg-provision-repo
      resource: cg-provision-repo-master
      trigger: true
    - get: plan-timer
      trigger: true
  - task: plan-update-production
    tags: [iaas]
    file: pipeline-tasks/terraform-apply.yml
    input_mapping: {terraform-templates: cg-provision-repo}
    params: &production-params
      TERRAFORM_ACTION: plan
      STACK_NAME: production
      TEMPLATE_SUBDIR: terraform/stacks/main
      S3_TFSTATE_BUCKET: ((aws_s3_tfstate_bucket))
      AWS_DEFAULT_REGION: ((aws_default_region))
      TF_VAR_stack_description: production
      TF_VAR_force_restricted_network: "no"
      # Do not copy the pattern below.  You should not need separate variables
      # for staging/prod.  Instead, use ${var.stack_name} in your .tf and get
      # IDs from `data` resources.
      TF_VAR_rds_password: ((production_rds_password))
      TF_VAR_rds_db_size: ((production_rds_db_size))
      # Enable for database upgrades:
      #TF_VAR_rds_apply_immediately: "true"
      #TF_VAR_rds_allow_major_version_upgrade: "true"
      TF_VAR_credhub_rds_password: ((production_credhub_rds_password))
      TF_VAR_remote_state_bucket: ((aws_s3_tfstate_bucket))
      TF_VAR_vpc_cidr: ((production_vpc_cidr))
      TF_VAR_cf_rds_password: ((production_cf_rds_password))
      TF_VAR_restricted_ingress_web_cidrs: ((production_restricted_ingress_web_cidrs))
      TF_VAR_restricted_ingress_web_ipv6_cidrs: ((production_restricted_ingress_web_ipv6_cidrs))
      TF_VAR_wildcard_certificate_name_prefix: star.fr.cloud.gov
      TF_VAR_wildcard_apps_certificate_name_prefix: star.app.cloud.gov
      TF_VAR_stack_prefix: cf-production
      TF_VAR_bucket_prefix: cg
      TF_VAR_blobstore_bucket_name: bosh-prod-blobstore
      TF_VAR_upstream_blobstore_bucket_name: bosh-tooling-blobstore
      TF_VAR_admin_hosts: '["admin.fr.cloud.gov"]'
      TF_VAR_shibboleth_hosts: '["idp.fr.cloud.gov"]'
      TF_VAR_platform_kibana_hosts: '["logs-platform.fr.cloud.gov"]'
      TF_VAR_domains_broker_alb_count: "6"
      TF_VAR_domain_broker_v2_alb_count: "3"
      TF_VAR_challenge_bucket: production-domains-broker-challenge
      TF_VAR_iam_cert_prefix: "/domains/production/*"
      TF_VAR_alb_prefix: "production-domains-*"
      TF_VAR_domains_broker_rds_username: ((production_domains_broker_rds_username))
      TF_VAR_domains_broker_rds_password: ((production_domains_broker_rds_password))
      TF_VAR_domain_broker_v2_rds_username: ((production_domain_broker_v2_rds_username))
      TF_VAR_domain_broker_v2_rds_password: ((production_domain_broker_v2_rds_password))
      TF_VAR_wildcard_pages_staging_certificate_name_prefix: star.pages-staging.cloud.gov
      TF_VAR_wildcard_sites_pages_staging_certificate_name_prefix: star.sites.pages-staging.cloud.gov
  - *notify-slack

- name: bootstrap-production
  plan:
  - in_parallel:
    - get: pipeline-tasks
    - get: cg-provision-repo
      resource: cg-provision-repo-master
      passed: [plan-bootstrap-production]
  - task: create-update-production
    tags: [iaas]
    file: pipeline-tasks/terraform-apply.yml
    input_mapping: {terraform-templates: cg-provision-repo}
    params:
      <<: *production-params
      TERRAFORM_ACTION: apply
  - in_parallel:
    - do:
      - task: init-bosh-db
        config:
          platform: linux
          image_resource:
            type: docker-image
            source:
              repository: 18fgsa/concourse-task
          inputs:
          - name: cg-provision-repo
          - name: terraform-state
          params:
            STATE_FILE_PATH: terraform-state/terraform.tfstate
          run:
            path: sh
            args:
            - -e
            - -c
            - cg-provision-repo/ci/scripts/update-bosh-db.sh
      - task: init-cf-db
        config:
          platform: linux
          image_resource:
            type: docker-image
            source:
              repository: 18fgsa/concourse-task
          inputs:
          - name: cg-provision-repo
          - name: terraform-state
          params:
            STATE_FILE_PATH: terraform-state/terraform.tfstate
          run:
            path: sh
            args:
            - -e
            - -c
            - cg-provision-repo/ci/scripts/update-cf-db.sh
  - do:
    - task: terraform-state-to-yaml
      file: pipeline-tasks/terraform12-state-to-yaml.yml
      params:
        STATE_FILE: terraform.tfstate
    - put: terraform-yaml-production
      params:
        file: terraform-yaml/state.yml

- name: plan-bootstrap-easta
  plan:
  - in_parallel:
    - get: pipeline-tasks
    - get: cg-provision-repo
      resource: cg-provision-repo-easta
      trigger: true
    - get: plan-timer
      trigger: true
  - task: plan-update-easta
    tags: [iaas]
    file: pipeline-tasks/terraform-apply.yml
    input_mapping: {terraform-templates: cg-provision-repo}
    params: &easta-params
      TERRAFORM_ACTION: plan
      STACK_NAME: easta
      TEMPLATE_SUBDIR: terraform/stacks/main
      S3_TFSTATE_BUCKET: ((aws_s3_tfstate_bucket))
      AWS_DEFAULT_REGION: ((aws_default_region)) # This is for remote state, so it should be the region TF is run from, not the region we're bootstrapping
      TF_VAR_aws_default_region: ((aws_easta_region)) # This is for remote state, so it should be the region TF is run from, not the region we're bootstrapping
      TF_VAR_stack_description: easta
      TF_VAR_force_restricted_network: "no"
      TF_VAR_assume_arn: ((easta_assume_arn))
      # Do not copy the pattern below.  You should not need separate variables
      # for staging/prod.  Instead, use ${var.stack_name} in your .tf and get
      # IDs from `data` resources.
      TF_VAR_rds_password: ((easta_rds_password))
      TF_VAR_rds_db_size: ((easta_rds_db_size))
      # Enable for database upgrades:
      #TF_VAR_rds_apply_immediately: "true"
      #TF_VAR_rds_allow_major_version_upgrade: "true"
      TF_VAR_credhub_rds_password: ((easta_credhub_rds_password))
      TF_VAR_remote_state_bucket: ((aws_s3_tfstate_bucket))
      TF_VAR_vpc_cidr: ((easta_vpc_cidr))
      TF_VAR_cf_rds_password: ((easta_cf_rds_password))
      TF_VAR_cf_rds_instance_type: db.m5.large
      TF_VAR_rds_instance_type: db.m5.large
      TF_VAR_restricted_ingress_web_cidrs: ((easta_restricted_ingress_web_cidrs))
      TF_VAR_restricted_ingress_web_ipv6_cidrs: ((easta_restricted_ingress_web_ipv6_cidrs))
      TF_VAR_wildcard_certificate_name_prefix: star.fr.ea.cloud.gov
      TF_VAR_wildcard_apps_certificate_name_prefix: star.app.ea.cloud.gov
      TF_VAR_stack_prefix: cf-easta
      TF_VAR_bucket_prefix: cg
      TF_VAR_blobstore_bucket_name: bosh-easta-blobstore
      TF_VAR_upstream_blobstore_bucket_name: bosh-master-east-blobstore # probably doesn't actually matter
      TF_VAR_admin_hosts: '["admin.fr.ea.cloud.gov"]'
      TF_VAR_shibboleth_hosts: '["idp.fr.ea.cloud.gov"]'
      TF_VAR_platform_kibana_hosts: '["logs-platform.fr.ea.cloud.gov"]'
      TF_VAR_domains_broker_alb_count: "1"
      TF_VAR_domain_broker_v2_alb_count: "1"
      TF_VAR_challenge_bucket: easta-domains-broker-challenge # unused, but not optional in TF
      TF_VAR_iam_cert_prefix: "/domains/easta/*"
      TF_VAR_alb_prefix: "easta-domains-*"
      TF_VAR_domains_broker_rds_username: ((easta_domains_broker_rds_username))
      TF_VAR_domains_broker_rds_password: ((easta_domains_broker_rds_password))
      TF_VAR_domain_broker_v2_rds_username: ((easta_domain_broker_v2_rds_username)) # unused, but not optional in TF
      TF_VAR_domain_broker_v2_rds_password: ((easta_domain_broker_v2_rds_password)) # unused, but not optional in TF
      TF_VAR_wildcard_pages_staging_certificate_name_prefix: star.fr.ea.cloud.gov # unused, but not optional in TF
      TF_VAR_wildcard_sites_pages_staging_certificate_name_prefix: star.fr.ea.cloud.gov # unused, but not optional in TF
      TF_VAR_parent_assume_arn: ((master_east_assume_arn))
      TF_VAR_parent_stack_name: "master-east"
      TF_VAR_log_bucket_name: "cg-elb-logs-easta"
      TF_VAR_bosh_default_ssh_public_key: "((easta_bosh_ssh_public_key))"
      TF_VAR_cloudfront_access_header_name: "((cloudfront_access_header_name))"
      TF_VAR_cloudfront_access_header_value: "((cloudfront_access_header_value))"
  - *notify-slack

- name: bootstrap-easta
  plan:
  - in_parallel:
    - get: pipeline-tasks
    - get: cg-provision-repo
      resource: cg-provision-repo-easta
      passed: [plan-bootstrap-easta]
  - task: create-update-easta
    tags: [iaas]
    file: pipeline-tasks/terraform-apply.yml
    input_mapping: {terraform-templates: cg-provision-repo}
    params:
      <<: *easta-params
      TERRAFORM_ACTION: apply
  - in_parallel:
    - do:
      - task: init-bosh-db
        config:
          platform: linux
          image_resource:
            type: docker-image
            source:
              repository: 18fgsa/concourse-task
          inputs:
          - name: cg-provision-repo
          - name: terraform-state
          params:
            STATE_FILE_PATH: terraform-state/terraform.tfstate
          run:
            path: sh
            args:
            - -e
            - -c
            - cg-provision-repo/ci/scripts/update-bosh-db.sh
      - task: init-cf-db
        config:
          platform: linux
          image_resource:
            type: docker-image
            source:
              repository: 18fgsa/concourse-task
          inputs:
          - name: cg-provision-repo
          - name: terraform-state
          params:
            STATE_FILE_PATH: terraform-state/terraform.tfstate
          run:
            path: sh
            args:
            - -e
            - -c
            - cg-provision-repo/ci/scripts/update-cf-db.sh
  - do:
    - task: terraform-state-to-yaml
      file: pipeline-tasks/terraform12-state-to-yaml.yml
      params:
        STATE_FILE: terraform.tfstate
    - put: terraform-yaml-easta
      params:
        file: terraform-yaml/state.yml

- name: plan-bootstrap-eastb
  plan:
  - in_parallel:
    - get: pipeline-tasks
    - get: cg-provision-repo
      resource: cg-provision-repo-easta
      trigger: true
    - get: plan-timer
      trigger: true
  - task: plan-update-eastb
    tags: [iaas]
    file: pipeline-tasks/terraform-apply.yml
    input_mapping: {terraform-templates: cg-provision-repo}
    params: &eastb-params
      TERRAFORM_ACTION: plan
      STACK_NAME: eastb
      TEMPLATE_SUBDIR: terraform/stacks/main
      S3_TFSTATE_BUCKET: ((aws_s3_tfstate_bucket))
      AWS_DEFAULT_REGION: ((aws_default_region)) # This is for remote state, so it should be the region TF is run from, not the region we're bootstrapping
      TF_VAR_aws_default_region: ((aws_eastb_region)) # This is for remote state, so it should be the region TF is run from, not the region we're bootstrapping
      TF_VAR_stack_description: eastb
      TF_VAR_force_restricted_network: "no"
      TF_VAR_assume_arn: ((eastb_assume_arn))
      # Do not copy the pattern below.  You should not need separate variables
      # for staging/prod.  Instead, use ${var.stack_name} in your .tf and get
      # IDs from `data` resources.
      TF_VAR_rds_password: ((eastb_rds_password))
      TF_VAR_rds_db_size: ((eastb_rds_db_size))
      # Enable for database upgrades:
      #TF_VAR_rds_apply_immediately: "true"
      #TF_VAR_rds_allow_major_version_upgrade: "true"
      TF_VAR_credhub_rds_password: ((eastb_credhub_rds_password))
      TF_VAR_remote_state_bucket: ((aws_s3_tfstate_bucket))
      TF_VAR_vpc_cidr: ((eastb_vpc_cidr))
      TF_VAR_cf_rds_password: ((eastb_cf_rds_password))
      TF_VAR_cf_rds_instance_type: db.m5.large
      TF_VAR_rds_instance_type: db.m5.large
      TF_VAR_restricted_ingress_web_cidrs: ((eastb_restricted_ingress_web_cidrs))
      TF_VAR_restricted_ingress_web_ipv6_cidrs: ((eastb_restricted_ingress_web_ipv6_cidrs))
      TF_VAR_wildcard_certificate_name_prefix: star.fr.eb.cloud.gov
      TF_VAR_wildcard_apps_certificate_name_prefix: star.app.eb.cloud.gov
      TF_VAR_stack_prefix: cf-eastb
      TF_VAR_bucket_prefix: cg
      TF_VAR_blobstore_bucket_name: bosh-eastb-blobstore
      TF_VAR_upstream_blobstore_bucket_name: bosh-master-east-blobstore # probably doesn't actually matter
      TF_VAR_admin_hosts: '["admin.fr.eb.cloud.gov"]'
      TF_VAR_shibboleth_hosts: '["idp.fr.eb.cloud.gov"]'
      TF_VAR_platform_kibana_hosts: '["logs-platform.fr.eb.cloud.gov"]'
      TF_VAR_domains_broker_alb_count: "1"
      TF_VAR_domain_broker_v2_alb_count: "1"
      TF_VAR_challenge_bucket: eastb-domains-broker-challenge # unused, but not optional in TF
      TF_VAR_iam_cert_prefix: "/domains/eastb/*"
      TF_VAR_alb_prefix: "eastb-domains-*"
      TF_VAR_domains_broker_rds_username: ((eastb_domains_broker_rds_username))
      TF_VAR_domains_broker_rds_password: ((eastb_domains_broker_rds_password))
      TF_VAR_domain_broker_v2_rds_username: ((eastb_domain_broker_v2_rds_username)) # unused, but not optional in TF
      TF_VAR_domain_broker_v2_rds_password: ((eastb_domain_broker_v2_rds_password)) # unused, but not optional in TF
      TF_VAR_wildcard_pages_staging_certificate_name_prefix: star.fr.eb.cloud.gov # unused, but not optional in TF
      TF_VAR_wildcard_sites_pages_staging_certificate_name_prefix: star.fr.eb.cloud.gov # unused, but not optional in TF
      TF_VAR_parent_assume_arn: ((master_east_assume_arn))
      TF_VAR_parent_stack_name: "master-east"
      TF_VAR_log_bucket_name: "cg-elb-logs-eastb"
      TF_VAR_bosh_default_ssh_public_key: "((eastb_bosh_ssh_public_key))"
      TF_VAR_cloudfront_access_header_name: "((cloudfront_access_header_name))"
      TF_VAR_cloudfront_access_header_value: "((cloudfront_access_header_value))"
  - *notify-slack

- name: bootstrap-eastb
  plan:
  - in_parallel:
    - get: pipeline-tasks
    - get: cg-provision-repo
      resource: cg-provision-repo-easta
      passed: [plan-bootstrap-eastb]
  - task: create-update-eastb
    tags: [iaas]
    file: pipeline-tasks/terraform-apply.yml
    input_mapping: {terraform-templates: cg-provision-repo}
    params:
      <<: *eastb-params
      TERRAFORM_ACTION: apply
  - in_parallel:
    - do:
      - task: init-bosh-db
        config:
          platform: linux
          image_resource:
            type: docker-image
            source:
              repository: 18fgsa/concourse-task
          inputs:
          - name: cg-provision-repo
          - name: terraform-state
          params:
            STATE_FILE_PATH: terraform-state/terraform.tfstate
          run:
            path: sh
            args:
            - -e
            - -c
            - cg-provision-repo/ci/scripts/update-bosh-db.sh
      - task: init-cf-db
        config:
          platform: linux
          image_resource:
            type: docker-image
            source:
              repository: 18fgsa/concourse-task
          inputs:
          - name: cg-provision-repo
          - name: terraform-state
          params:
            STATE_FILE_PATH: terraform-state/terraform.tfstate
          run:
            path: sh
            args:
            - -e
            - -c
            - cg-provision-repo/ci/scripts/update-cf-db.sh
  - do:
    - task: terraform-state-to-yaml
      file: pipeline-tasks/terraform12-state-to-yaml.yml
      params:
        STATE_FILE: terraform.tfstate
    - put: terraform-yaml-eastb
      params:
        file: terraform-yaml/state.yml


- name: plan-bootstrap-westb
  plan:
  - in_parallel:
    - get: pipeline-tasks
    - get: cg-provision-repo
      resource: cg-provision-repo-easta
      trigger: true
    - get: plan-timer
      trigger: true
  - task: plan-update-westb
    tags: [iaas]
    file: pipeline-tasks/terraform-apply.yml
    input_mapping: {terraform-templates: cg-provision-repo}
    params: &westb-params
      TERRAFORM_ACTION: plan
      STACK_NAME: westb
      TEMPLATE_SUBDIR: terraform/stacks/main
      S3_TFSTATE_BUCKET: ((aws_s3_tfstate_bucket))
      AWS_DEFAULT_REGION: ((aws_default_region)) # This is for remote state, so it should be the region TF is run from, not the region we're bootstrapping
      TF_VAR_aws_default_region: ((aws_westb_region)) # This is for remote state, so it should be the region TF is run from, not the region we're bootstrapping
      TF_VAR_stack_description: westb
      TF_VAR_force_restricted_network: "no"
      TF_VAR_assume_arn: ((westb_assume_arn))
      # Do not copy the pattern below.  You should not need separate variables
      # for staging/prod.  Instead, use ${var.stack_name} in your .tf and get
      # IDs from `data` resources.
      TF_VAR_rds_password: ((westb_rds_password))
      TF_VAR_rds_db_size: ((westb_rds_db_size))
      # Enable for database upgrades:
      #TF_VAR_rds_apply_immediately: "true"
      #TF_VAR_rds_allow_major_version_upgrade: "true"
      TF_VAR_credhub_rds_password: ((westb_credhub_rds_password))
      TF_VAR_remote_state_bucket: ((aws_s3_tfstate_bucket))
      TF_VAR_vpc_cidr: ((westb_vpc_cidr))
      TF_VAR_cf_rds_password: ((westb_cf_rds_password))
      TF_VAR_cf_rds_instance_type: db.m5.large
      TF_VAR_rds_instance_type: db.m5.large
      TF_VAR_restricted_ingress_web_cidrs: ((westb_restricted_ingress_web_cidrs))
      TF_VAR_restricted_ingress_web_ipv6_cidrs: ((westb_restricted_ingress_web_ipv6_cidrs))
      TF_VAR_wildcard_certificate_name_prefix: star.fr.wb.cloud.gov
      TF_VAR_wildcard_apps_certificate_name_prefix: star.app.wb.cloud.gov
      TF_VAR_stack_prefix: cf-westb
      TF_VAR_bucket_prefix: cg
      TF_VAR_blobstore_bucket_name: bosh-westb-blobstore
      TF_VAR_upstream_blobstore_bucket_name: bosh-master-east-blobstore # probably doesn't actually matter
      TF_VAR_admin_hosts: '["admin.fr.wb.cloud.gov"]'
      TF_VAR_shibboleth_hosts: '["idp.fr.wb.cloud.gov"]'
      TF_VAR_platform_kibana_hosts: '["logs-platform.fr.wb.cloud.gov"]'
      TF_VAR_domains_broker_alb_count: "1"
      TF_VAR_domain_broker_v2_alb_count: "1"
      TF_VAR_challenge_bucket: westb-domains-broker-challenge # unused, but not optional in TF
      TF_VAR_iam_cert_prefix: "/domains/westb/*"
      TF_VAR_alb_prefix: "westb-domains-*"
      TF_VAR_domains_broker_rds_username: ((westb_domains_broker_rds_username))
      TF_VAR_domains_broker_rds_password: ((westb_domains_broker_rds_password))
      TF_VAR_domain_broker_v2_rds_username: ((westb_domain_broker_v2_rds_username)) # unused, but not optional in TF
      TF_VAR_domain_broker_v2_rds_password: ((westb_domain_broker_v2_rds_password)) # unused, but not optional in TF
      TF_VAR_wildcard_pages_staging_certificate_name_prefix: star.fr.wb.cloud.gov # unused, but not optional in TF
      TF_VAR_wildcard_sites_pages_staging_certificate_name_prefix: star.fr.wb.cloud.gov # unused, but not optional in TF
      TF_VAR_parent_assume_arn: ((master_west_assume_arn))
      TF_VAR_parent_stack_name: "master-west"
      TF_VAR_log_bucket_name: "cg-elb-logs-westb"
      TF_VAR_bosh_default_ssh_public_key: "((westb_bosh_ssh_public_key))"
      TF_VAR_cloudfront_access_header_name: "((cloudfront_access_header_name))"
      TF_VAR_cloudfront_access_header_value: "((cloudfront_access_header_value))"
  - *notify-slack

- name: bootstrap-westb
  plan:
  - in_parallel:
    - get: pipeline-tasks
    - get: cg-provision-repo
      resource: cg-provision-repo-easta
      passed: [plan-bootstrap-westb]
  - task: create-update-westb
    tags: [iaas]
    file: pipeline-tasks/terraform-apply.yml
    input_mapping: {terraform-templates: cg-provision-repo}
    params:
      <<: *westb-params
      TERRAFORM_ACTION: apply
  - in_parallel:
    - do:
      - task: init-bosh-db
        config:
          platform: linux
          image_resource:
            type: docker-image
            source:
              repository: 18fgsa/concourse-task
          inputs:
          - name: cg-provision-repo
          - name: terraform-state
          params:
            STATE_FILE_PATH: terraform-state/terraform.tfstate
          run:
            path: sh
            args:
            - -e
            - -c
            - cg-provision-repo/ci/scripts/update-bosh-db.sh
      - task: init-cf-db
        config:
          platform: linux
          image_resource:
            type: docker-image
            source:
              repository: 18fgsa/concourse-task
          inputs:
          - name: cg-provision-repo
          - name: terraform-state
          params:
            STATE_FILE_PATH: terraform-state/terraform.tfstate
          run:
            path: sh
            args:
            - -e
            - -c
            - cg-provision-repo/ci/scripts/update-cf-db.sh
  - do:
    - task: terraform-state-to-yaml
      file: pipeline-tasks/terraform12-state-to-yaml.yml
      params:
        STATE_FILE: terraform.tfstate
    - put: terraform-yaml-westb
      params:
        file: terraform-yaml/state.yml

- name: plan-bootstrap-westc
  plan:
  - in_parallel:
    - get: pipeline-tasks
    - get: cg-provision-repo
      resource: cg-provision-repo-easta
      trigger: true
    - get: plan-timer
      trigger: true
  - task: plan-update-westc
    tags: [iaas]
    file: pipeline-tasks/terraform-apply.yml
    input_mapping: {terraform-templates: cg-provision-repo}
    params: &westc-params
      TERRAFORM_ACTION: plan
      STACK_NAME: westc
      TEMPLATE_SUBDIR: terraform/stacks/main
      S3_TFSTATE_BUCKET: ((aws_s3_tfstate_bucket))
      AWS_DEFAULT_REGION: ((aws_default_region)) # This is for remote state, so it should be the region TF is run from, not the region we're bootstrapping
      TF_VAR_aws_default_region: ((aws_westc_region)) # This is for remote state, so it should be the region TF is run from, not the region we're bootstrapping
      TF_VAR_stack_description: westc
      TF_VAR_force_restricted_network: "no"
      TF_VAR_assume_arn: ((westc_assume_arn))
      # Do not copy the pattern below.  You should not need separate variables
      # for staging/prod.  Instead, use ${var.stack_name} in your .tf and get
      # IDs from `data` resources.
      TF_VAR_rds_password: ((westc_rds_password))
      TF_VAR_rds_db_size: ((westc_rds_db_size))
      # Enable for database upgrades:
      #TF_VAR_rds_apply_immediately: "true"
      #TF_VAR_rds_allow_major_version_upgrade: "true"
      TF_VAR_credhub_rds_password: ((westc_credhub_rds_password))
      TF_VAR_remote_state_bucket: ((aws_s3_tfstate_bucket))
      TF_VAR_vpc_cidr: ((westc_vpc_cidr))
      TF_VAR_cf_rds_password: ((westc_cf_rds_password))
      TF_VAR_cf_rds_instance_type: db.m5.large
      TF_VAR_rds_instance_type: db.m5.large
      TF_VAR_restricted_ingress_web_cidrs: ((westc_restricted_ingress_web_cidrs))
      TF_VAR_restricted_ingress_web_ipv6_cidrs: ((westc_restricted_ingress_web_ipv6_cidrs))
      TF_VAR_wildcard_certificate_name_prefix: star.fr.wc.cloud.gov
      TF_VAR_wildcard_apps_certificate_name_prefix: star.app.wc.cloud.gov
      TF_VAR_stack_prefix: cf-westc
      TF_VAR_bucket_prefix: cg
      TF_VAR_blobstore_bucket_name: bosh-westc-blobstore
      TF_VAR_upstream_blobstore_bucket_name: bosh-master-west-blobstore # probably doesn't actually matter
      TF_VAR_admin_hosts: '["admin.fr.wc.cloud.gov"]'
      TF_VAR_shibboleth_hosts: '["idp.fr.wc.cloud.gov"]'
      TF_VAR_platform_kibana_hosts: '["logs-platform.fr.wc.cloud.gov"]'
      TF_VAR_domains_broker_alb_count: "1"
      TF_VAR_domain_broker_v2_alb_count: "1"
      TF_VAR_challenge_bucket: westc-domains-broker-challenge # unused, but not optional in TF
      TF_VAR_iam_cert_prefix: "/domains/westc/*"
      TF_VAR_alb_prefix: "westc-domains-*"
      TF_VAR_domains_broker_rds_username: ((westc_domains_broker_rds_username))
      TF_VAR_domains_broker_rds_password: ((westc_domains_broker_rds_password))
      TF_VAR_domain_broker_v2_rds_username: ((westc_domain_broker_v2_rds_username)) # unused, but not optional in TF
      TF_VAR_domain_broker_v2_rds_password: ((westc_domain_broker_v2_rds_password)) # unused, but not optional in TF
      TF_VAR_wildcard_pages_staging_certificate_name_prefix: star.fr.wc.cloud.gov # unused, but not optional in TF
      TF_VAR_wildcard_sites_pages_staging_certificate_name_prefix: star.fr.wc.cloud.gov # unused, but not optional in TF
      TF_VAR_parent_assume_arn: ((master_west_assume_arn))
      TF_VAR_parent_stack_name: "master-west"
      TF_VAR_log_bucket_name: "cg-elb-logs-westc"
      TF_VAR_bosh_default_ssh_public_key: "((westc_bosh_ssh_public_key))"
      TF_VAR_cloudfront_access_header_name: "((cloudfront_access_header_name))"
      TF_VAR_cloudfront_access_header_value: "((cloudfront_access_header_value))"
  - *notify-slack

- name: bootstrap-westc
  plan:
  - in_parallel:
    - get: pipeline-tasks
    - get: cg-provision-repo
      resource: cg-provision-repo-easta
      passed: [plan-bootstrap-westc]
  - task: create-update-westc
    tags: [iaas]
    file: pipeline-tasks/terraform-apply.yml
    input_mapping: {terraform-templates: cg-provision-repo}
    params:
      <<: *westc-params
      TERRAFORM_ACTION: apply
  - in_parallel:
    - do:
      - task: init-bosh-db
        config:
          platform: linux
          image_resource:
            type: docker-image
            source:
              repository: 18fgsa/concourse-task
          inputs:
          - name: cg-provision-repo
          - name: terraform-state
          params:
            STATE_FILE_PATH: terraform-state/terraform.tfstate
          run:
            path: sh
            args:
            - -e
            - -c
            - cg-provision-repo/ci/scripts/update-bosh-db.sh
      - task: init-cf-db
        config:
          platform: linux
          image_resource:
            type: docker-image
            source:
              repository: 18fgsa/concourse-task
          inputs:
          - name: cg-provision-repo
          - name: terraform-state
          params:
            STATE_FILE_PATH: terraform-state/terraform.tfstate
          run:
            path: sh
            args:
            - -e
            - -c
            - cg-provision-repo/ci/scripts/update-cf-db.sh
  - do:
    - task: terraform-state-to-yaml
      file: pipeline-tasks/terraform12-state-to-yaml.yml
      params:
        STATE_FILE: terraform.tfstate
    - put: terraform-yaml-westc
      params:
        file: terraform-yaml/state.yml


- name: acme-certificate-development
  plan:
  - in_parallel:
    - get: acme-timer
      trigger: true
    - get: cg-provision-repo
      resource: cg-provision-repo-development
    - get: terraform-yaml-tooling
      resource: terraform-yaml-tooling
    - get: terraform-yaml-external
      resource: terraform-yaml-external-staging
  - task: check-certificates
    file: cg-provision-repo/ci/check-certificates.yml
    params:
      AWS_DEFAULT_REGION: ((aws_default_region))
      CERT_PATH: /lets-encrypt/dev/
  - task: provision-certificate
    file: cg-provision-repo/ci/provision-certificate.yml
    params:
      CERT_PREFIX: star.dev.us-gov-west-1.aws-us-gov.cloud.gov
      ACME_SERVER: https://acme-v02.api.letsencrypt.org/directory
      DOMAIN: "*.dev.us-gov-west-1.aws-us-gov.cloud.gov"
      EMAIL: cloud-gov-operations@gsa.gov
  - task: upload-certificate
    file: cg-provision-repo/ci/upload-certificate.yml
    params:
      AWS_DEFAULT_REGION: ((aws_default_region))
      CERT_PATH: /lets-encrypt/dev/
      CERT_PREFIX: star.dev.us-gov-west-1.aws-us-gov.cloud.gov
  on_failure:
    put: slack
    params:
      text: |
        :x: Failed to check ACME certificate for *.dev.us-gov-west-1.aws-us-gov.cloud.gov
        <$ATC_EXTERNAL_URL/teams/$BUILD_TEAM_NAME/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME|View build details>
      channel: ((slack-channel))
      username: ((slack-username))
      icon_url: ((slack-icon-url))

- name: acme-certificate-staging
  plan:
  - in_parallel:
    - get: acme-timer
      trigger: true
    - get: cg-provision-repo
    - get: terraform-yaml-tooling
      resource: terraform-yaml-tooling
    - get: terraform-yaml-external
      resource: terraform-yaml-external-staging
  - task: check-certificates
    file: cg-provision-repo/ci/check-certificates.yml
    params:
      AWS_DEFAULT_REGION: ((aws_default_region))
      CERT_PATH: /lets-encrypt/staging/
  - task: provision-certificate
    file: cg-provision-repo/ci/provision-certificate.yml
    params:
      CERT_PREFIX: star.fr-stage.cloud.gov
      ACME_SERVER: https://acme-v02.api.letsencrypt.org/directory
      DOMAIN: "*.fr-stage.cloud.gov"
      EMAIL: cloud-gov-operations@gsa.gov
  - task: upload-certificate
    file: cg-provision-repo/ci/upload-certificate.yml
    params:
      AWS_DEFAULT_REGION: ((aws_default_region))
      CERT_PATH: /lets-encrypt/staging/
      CERT_PREFIX: star.fr-stage.cloud.gov
  on_failure:
    put: slack
    params:
      text: |
        :x: Failed to check ACME certificate for *.fr-stage.cloud.gov
        <$ATC_EXTERNAL_URL/teams/$BUILD_TEAM_NAME/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME|View build details>
      channel: ((slack-channel))
      username: ((slack-username))
      icon_url: ((slack-icon-url))

- name: acme-certificate-production
  plan:
  - in_parallel:
    - get: acme-timer
      trigger: true
    - get: cg-provision-repo
    - get: terraform-yaml-tooling
      resource: terraform-yaml-tooling
    - get: terraform-yaml-external
      resource: terraform-yaml-external-production
  - task: check-certificates
    file: cg-provision-repo/ci/check-certificates.yml
    params:
      AWS_DEFAULT_REGION: ((aws_default_region))
      CERT_PATH: /lets-encrypt/production/
  - task: provision-certificate
    file: cg-provision-repo/ci/provision-certificate.yml
    params:
      CERT_PREFIX: star.fr.cloud.gov
      ACME_SERVER: https://acme-v02.api.letsencrypt.org/directory
      DOMAIN: "*.fr.cloud.gov"
      EMAIL: cloud-gov-operations@gsa.gov
  - task: upload-certificate
    file: cg-provision-repo/ci/upload-certificate.yml
    params:
      AWS_DEFAULT_REGION: ((aws_default_region))
      CERT_PATH: /lets-encrypt/production/
      CERT_PREFIX: star.fr.cloud.gov
  on_failure:
    put: slack
    params:
      text: |
        :x: Failed to check ACME certificates for *.fr.cloud.gov
        <$ATC_EXTERNAL_URL/teams/$BUILD_TEAM_NAME/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME|View build details>
      channel: ((slack-channel))
      username: ((slack-username))
      icon_url: ((slack-icon-url))

- name: acme-certificate-production-apps
  plan:
  - in_parallel:
    - get: acme-timer
      trigger: true
    - get: cg-provision-repo
    - get: terraform-yaml-tooling
      resource: terraform-yaml-tooling
    - get: terraform-yaml-external
      resource: terraform-yaml-external-production
  - task: check-certificates
    file: cg-provision-repo/ci/check-certificates.yml
    params:
      AWS_DEFAULT_REGION: ((aws_default_region))
      CERT_PATH: /lets-encrypt/production/
  - task: provision-certificate
    file: cg-provision-repo/ci/provision-certificate.yml
    params:
      CERT_PREFIX: star.app.cloud.gov
      ACME_SERVER: https://acme-v02.api.letsencrypt.org/directory
      DOMAIN: "*.app.cloud.gov"
      EMAIL: cloud-gov-operations@gsa.gov
  - task: upload-certificate
    file: cg-provision-repo/ci/upload-certificate.yml
    params:
      AWS_DEFAULT_REGION: ((aws_default_region))
      CERT_PATH: /lets-encrypt/production/
      CERT_PREFIX: star.app.cloud.gov
  on_failure:
    put: slack
    params:
      text: |
        :x: Failed to check ACME certificates for *.app.cloud.gov
        <$ATC_EXTERNAL_URL/teams/$BUILD_TEAM_NAME/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME|View build details>
      channel: ((slack-channel))
      username: ((slack-username))
      icon_url: ((slack-icon-url))

- name: acme-certificate-east-tooling
  plan:
  - in_parallel:
    - get: acme-timer
      trigger: true
    - get: cg-provision-repo
      resource: cg-provision-repo-easta
    - get: terraform-yaml-tooling
      resource: terraform-yaml-tooling
    - get: terraform-yaml-external
      resource: terraform-yaml-external-easta
  - task: check-certificates
    file: cg-provision-repo/ci/check-certificates.yml
    params:
      AWS_DEFAULT_REGION: ((aws_master_east_region))
      ASSUME_ROLE_ARN: ((master_east_cert_role_arn))
      CERT_PATH: /lets-encrypt/east/
  - task: provision-certificate
    file: cg-provision-repo/ci/provision-certificate.yml
    params:
      CERT_PREFIX: star.fr.east.cloud.gov
      ACME_SERVER: https://acme-v02.api.letsencrypt.org/directory
      DOMAIN: "*.fr.east.cloud.gov"
      EMAIL: cloud-gov-operations@gsa.gov
  - task: upload-certificate
    file: cg-provision-repo/ci/upload-certificate.yml
    params:
      ASSUME_ROLE_ARN: ((easta_cert_role_arn))
      AWS_DEFAULT_REGION: ((aws_default_region))
      CERT_PATH: /lets-encrypt/east/
      CERT_PREFIX: star.fr.east.cloud.gov
  on_failure:
    put: slack
    params:
      text: |
        :x: Failed to check ACME certificates for *.fr.east.cloud.gov
        <$ATC_EXTERNAL_URL/teams/$BUILD_TEAM_NAME/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME|View build details>
      channel: ((slack-channel))
      username: ((slack-username))
      icon_url: ((slack-icon-url))

- name: acme-certificate-west-tooling
  plan:
  - in_parallel:
    - get: acme-timer
      trigger: true
    - get: cg-provision-repo
      resource: cg-provision-repo-easta
    - get: terraform-yaml-tooling
      resource: terraform-yaml-tooling
    - get: terraform-yaml-external
      resource: terraform-yaml-external-production
  - task: check-certificates
    file: cg-provision-repo/ci/check-certificates.yml
    params:
      AWS_DEFAULT_REGION: ((aws_master_west_region))
      ASSUME_ROLE_ARN: ((master_west_cert_role_arn))
      CERT_PATH: /lets-encrypt/west/
  - task: provision-certificate
    file: cg-provision-repo/ci/provision-certificate.yml
    params:
      CERT_PREFIX: star.fr.west.cloud.gov
      ACME_SERVER: https://acme-v02.api.letsencrypt.org/directory
      DOMAIN: "*.fr.west.cloud.gov"
      EMAIL: cloud-gov-operations@gsa.gov
  - task: upload-certificate
    file: cg-provision-repo/ci/upload-certificate.yml
    params:
      ASSUME_ROLE_ARN: ((master_west_cert_role_arn))
      AWS_DEFAULT_REGION: ((aws_default_region))
      CERT_PATH: /lets-encrypt/west/
      CERT_PREFIX: star.fr.west.cloud.gov
  on_failure:
    put: slack
    params:
      text: |
        :x: Failed to check ACME certificates for *.fr.west.cloud.gov
        <$ATC_EXTERNAL_URL/teams/$BUILD_TEAM_NAME/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME|View build details>
      channel: ((slack-channel))
      username: ((slack-username))
      icon_url: ((slack-icon-url))

- name: acme-certificate-westb
  plan:
  - in_parallel:
    - get: acme-timer
      trigger: true
    - get: cg-provision-repo
      resource: cg-provision-repo-easta
    - get: terraform-yaml-tooling
      resource: terraform-yaml-tooling
    - get: terraform-yaml-external
      resource: terraform-yaml-external-westb
  - task: check-certificates
    file: cg-provision-repo/ci/check-certificates.yml
    params:
      AWS_DEFAULT_REGION: ((aws_westb_region))
      ASSUME_ROLE_ARN: ((westb_cert_role_arn))
      CERT_PATH: /lets-encrypt/westb/
  - task: provision-certificate
    file: cg-provision-repo/ci/provision-certificate.yml
    params:
      CERT_PREFIX: star.fr.wb.cloud.gov
      ACME_SERVER: https://acme-v02.api.letsencrypt.org/directory
      DOMAIN: "*.fr.wb.cloud.gov"
      EMAIL: cloud-gov-operations@gsa.gov
  - task: upload-certificate
    file: cg-provision-repo/ci/upload-certificate.yml
    params:
      ASSUME_ROLE_ARN: ((westb_cert_role_arn))
      AWS_DEFAULT_REGION: ((aws_default_region))
      CERT_PATH: /lets-encrypt/westb/
      CERT_PREFIX: star.fr.wb.cloud.gov
  on_failure:
    put: slack
    params:
      text: |
        :x: Failed to check ACME certificates for *.fr.wb.cloud.gov
        <$ATC_EXTERNAL_URL/teams/$BUILD_TEAM_NAME/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME|View build details>
      channel: ((slack-channel))
      username: ((slack-username))
      icon_url: ((slack-icon-url))

- name: acme-certificate-westb-apps
  plan:
  - in_parallel:
    - get: acme-timer
      trigger: true
    - get: cg-provision-repo
      resource: cg-provision-repo-easta
    - get: terraform-yaml-tooling
      resource: terraform-yaml-tooling
    - get: terraform-yaml-external
      resource: terraform-yaml-external-westb
  - task: check-certificates
    file: cg-provision-repo/ci/check-certificates.yml
    params:
      AWS_DEFAULT_REGION: ((aws_westb_region))
      ASSUME_ROLE_ARN: ((westb_cert_role_arn))
      CERT_PATH: /lets-encrypt/westb/
  - task: provision-certificate
    file: cg-provision-repo/ci/provision-certificate.yml
    params:
      CERT_PREFIX: star.app.wb.cloud.gov
      ACME_SERVER: https://acme-v02.api.letsencrypt.org/directory
      DOMAIN: "*.app.wb.cloud.gov"
      EMAIL: cloud-gov-operations@gsa.gov
  - task: upload-certificate
    file: cg-provision-repo/ci/upload-certificate.yml
    params:
      AWS_DEFAULT_REGION: ((aws_westb_region))
      ASSUME_ROLE_ARN: ((westb_cert_role_arn))
      CERT_PATH: /lets-encrypt/westb/
      CERT_PREFIX: star.app.wb.cloud.gov
  on_failure:
    put: slack
    params:
      text: |
        :x: Failed to check ACME certificates for *.app.wb.cloud.gov
        <$ATC_EXTERNAL_URL/teams/$BUILD_TEAM_NAME/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME|View build details>
      channel: ((slack-channel))
      username: ((slack-username))
      icon_url: ((slack-icon-url))

- name: acme-certificate-westc
  plan:
  - in_parallel:
    - get: acme-timer
      trigger: true
    - get: cg-provision-repo
      resource: cg-provision-repo-easta
    - get: terraform-yaml-tooling
      resource: terraform-yaml-tooling
    - get: terraform-yaml-external
      resource: terraform-yaml-external-westc
  - task: check-certificates
    file: cg-provision-repo/ci/check-certificates.yml
    params:
      AWS_DEFAULT_REGION: ((aws_westc_region))
      ASSUME_ROLE_ARN: ((westc_cert_role_arn))
      CERT_PATH: /lets-encrypt/westc/
  - task: provision-certificate
    file: cg-provision-repo/ci/provision-certificate.yml
    params:
      CERT_PREFIX: star.fr.wc.cloud.gov
      ACME_SERVER: https://acme-v02.api.letsencrypt.org/directory
      DOMAIN: "*.fr.wc.cloud.gov"
      EMAIL: cloud-gov-operations@gsa.gov
  - task: upload-certificate
    file: cg-provision-repo/ci/upload-certificate.yml
    params:
      ASSUME_ROLE_ARN: ((westc_cert_role_arn))
      AWS_DEFAULT_REGION: ((aws_default_region))
      CERT_PATH: /lets-encrypt/westc/
      CERT_PREFIX: star.fr.wc.cloud.gov
  on_failure:
    put: slack
    params:
      text: |
        :x: Failed to check ACME certificates for *.fr.wc.cloud.gov
        <$ATC_EXTERNAL_URL/teams/$BUILD_TEAM_NAME/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME|View build details>
      channel: ((slack-channel))
      username: ((slack-username))
      icon_url: ((slack-icon-url))

- name: acme-certificate-westc-apps
  plan:
  - in_parallel:
    - get: acme-timer
      trigger: true
    - get: cg-provision-repo
      resource: cg-provision-repo-easta
    - get: terraform-yaml-tooling
      resource: terraform-yaml-tooling
    - get: terraform-yaml-external
      resource: terraform-yaml-external-westc
  - task: check-certificates
    file: cg-provision-repo/ci/check-certificates.yml
    params:
      AWS_DEFAULT_REGION: ((aws_westc_region))
      ASSUME_ROLE_ARN: ((westc_cert_role_arn))
      CERT_PATH: /lets-encrypt/westc/
  - task: provision-certificate
    file: cg-provision-repo/ci/provision-certificate.yml
    params:
      CERT_PREFIX: star.app.wc.cloud.gov
      ACME_SERVER: https://acme-v02.api.letsencrypt.org/directory
      DOMAIN: "*.app.wc.cloud.gov"
      EMAIL: cloud-gov-operations@gsa.gov
  - task: upload-certificate
    file: cg-provision-repo/ci/upload-certificate.yml
    params:
      AWS_DEFAULT_REGION: ((aws_westc_region))
      ASSUME_ROLE_ARN: ((westc_cert_role_arn))
      CERT_PATH: /lets-encrypt/westc/
      CERT_PREFIX: star.app.wc.cloud.gov
  on_failure:
    put: slack
    params:
      text: |
        :x: Failed to check ACME certificates for *.app.wc.cloud.gov
        <$ATC_EXTERNAL_URL/teams/$BUILD_TEAM_NAME/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME|View build details>
      channel: ((slack-channel))
      username: ((slack-username))
      icon_url: ((slack-icon-url))

- name: acme-certificate-easta
  plan:
  - in_parallel:
    - get: acme-timer
      trigger: true
    - get: cg-provision-repo
      resource: cg-provision-repo-easta
    - get: terraform-yaml-tooling
      resource: terraform-yaml-tooling
    - get: terraform-yaml-external
      resource: terraform-yaml-external-easta
  - task: check-certificates
    file: cg-provision-repo/ci/check-certificates.yml
    params:
      AWS_DEFAULT_REGION: ((aws_easta_region))
      ASSUME_ROLE_ARN: ((easta_cert_role_arn))
      CERT_PATH: /lets-encrypt/easta/
  - task: provision-certificate
    file: cg-provision-repo/ci/provision-certificate.yml
    params:
      CERT_PREFIX: star.fr.ea.cloud.gov
      ACME_SERVER: https://acme-v02.api.letsencrypt.org/directory
      DOMAIN: "*.fr.ea.cloud.gov"
      EMAIL: cloud-gov-operations@gsa.gov
  - task: upload-certificate
    file: cg-provision-repo/ci/upload-certificate.yml
    params:
      ASSUME_ROLE_ARN: ((easta_cert_role_arn))
      AWS_DEFAULT_REGION: ((aws_default_region))
      CERT_PATH: /lets-encrypt/easta/
      CERT_PREFIX: star.fr.ea.cloud.gov
  on_failure:
    put: slack
    params:
      text: |
        :x: Failed to check ACME certificates for *.fr.ea.cloud.gov
        <$ATC_EXTERNAL_URL/teams/$BUILD_TEAM_NAME/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME|View build details>
      channel: ((slack-channel))
      username: ((slack-username))
      icon_url: ((slack-icon-url))

- name: acme-certificate-easta-apps
  plan:
  - in_parallel:
    - get: acme-timer
      trigger: true
    - get: cg-provision-repo
      resource: cg-provision-repo-easta
    - get: terraform-yaml-tooling
      resource: terraform-yaml-tooling
    - get: terraform-yaml-external
      resource: terraform-yaml-external-easta
  - task: check-certificates
    file: cg-provision-repo/ci/check-certificates.yml
    params:
      AWS_DEFAULT_REGION: ((aws_easta_region))
      ASSUME_ROLE_ARN: ((easta_cert_role_arn))
      CERT_PATH: /lets-encrypt/easta/
  - task: provision-certificate
    file: cg-provision-repo/ci/provision-certificate.yml
    params:
      CERT_PREFIX: star.app.ea.cloud.gov
      ACME_SERVER: https://acme-v02.api.letsencrypt.org/directory
      DOMAIN: "*.app.ea.cloud.gov"
      EMAIL: cloud-gov-operations@gsa.gov
  - task: upload-certificate
    file: cg-provision-repo/ci/upload-certificate.yml
    params:
      AWS_DEFAULT_REGION: ((aws_easta_region))
      ASSUME_ROLE_ARN: ((easta_cert_role_arn))
      CERT_PATH: /lets-encrypt/easta/
      CERT_PREFIX: star.app.ea.cloud.gov
  on_failure:
    put: slack
    params:
      text: |
        :x: Failed to check ACME certificates for *.app.ea.cloud.gov
        <$ATC_EXTERNAL_URL/teams/$BUILD_TEAM_NAME/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME|View build details>
      channel: ((slack-channel))
      username: ((slack-username))
      icon_url: ((slack-icon-url))

- name: acme-certificate-eastb
  plan:
  - in_parallel:
    - get: acme-timer
      trigger: true
    - get: cg-provision-repo
      resource: cg-provision-repo-easta
    - get: terraform-yaml-tooling
      resource: terraform-yaml-tooling
    - get: terraform-yaml-external
      resource: terraform-yaml-external-eastb
  - task: check-certificates
    file: cg-provision-repo/ci/check-certificates.yml
    params:
      AWS_DEFAULT_REGION: ((aws_eastb_region))
      ASSUME_ROLE_ARN: ((eastb_cert_role_arn))
      CERT_PATH: /lets-encrypt/eastb/
  - task: provision-certificate
    file: cg-provision-repo/ci/provision-certificate.yml
    params:
      CERT_PREFIX: star.fr.eb.cloud.gov
      ACME_SERVER: https://acme-v02.api.letsencrypt.org/directory
      DOMAIN: "*.fr.eb.cloud.gov"
      EMAIL: cloud-gov-operations@gsa.gov
  - task: upload-certificate
    file: cg-provision-repo/ci/upload-certificate.yml
    params:
      ASSUME_ROLE_ARN: ((eastb_cert_role_arn))
      AWS_DEFAULT_REGION: ((aws_default_region))
      CERT_PATH: /lets-encrypt/eastb/
      CERT_PREFIX: star.fr.eb.cloud.gov
  on_failure:
    put: slack
    params:
      text: |
        :x: Failed to check ACME certificates for *.fr.eb.cloud.gov
        <$ATC_EXTERNAL_URL/teams/$BUILD_TEAM_NAME/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME|View build details>
      channel: ((slack-channel))
      username: ((slack-username))
      icon_url: ((slack-icon-url))

- name: acme-certificate-eastb-apps
  plan:
  - in_parallel:
    - get: acme-timer
      trigger: true
    - get: cg-provision-repo
      resource: cg-provision-repo-easta
    - get: terraform-yaml-tooling
      resource: terraform-yaml-tooling
    - get: terraform-yaml-external
      resource: terraform-yaml-external-eastb
  - task: check-certificates
    file: cg-provision-repo/ci/check-certificates.yml
    params:
      AWS_DEFAULT_REGION: ((aws_eastb_region))
      ASSUME_ROLE_ARN: ((eastb_cert_role_arn))
      CERT_PATH: /lets-encrypt/eastb/
  - task: provision-certificate
    file: cg-provision-repo/ci/provision-certificate.yml
    params:
      CERT_PREFIX: star.app.eb.cloud.gov
      ACME_SERVER: https://acme-v02.api.letsencrypt.org/directory
      DOMAIN: "*.app.eb.cloud.gov"
      EMAIL: cloud-gov-operations@gsa.gov
  - task: upload-certificate
    file: cg-provision-repo/ci/upload-certificate.yml
    params:
      AWS_DEFAULT_REGION: ((aws_eastb_region))
      ASSUME_ROLE_ARN: ((eastb_cert_role_arn))
      CERT_PATH: /lets-encrypt/eastb/
      CERT_PREFIX: star.app.eb.cloud.gov
  on_failure:
    put: slack
    params:
      text: |
        :x: Failed to check ACME certificates for *.app.eb.cloud.gov
        <$ATC_EXTERNAL_URL/teams/$BUILD_TEAM_NAME/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME|View build details>
      channel: ((slack-channel))
      username: ((slack-username))
      icon_url: ((slack-icon-url))

- name: acme-certificate-staging-pages
  plan:
  - in_parallel:
    - get: acme-timer
      trigger: true
    - get: cg-provision-repo
    - get: terraform-yaml-tooling
      resource: terraform-yaml-tooling
    - get: terraform-yaml-external
      resource: terraform-yaml-external-production
  - task: check-certificates
    file: cg-provision-repo/ci/check-certificates.yml
    params:
      AWS_DEFAULT_REGION: ((aws_default_region))
      CERT_PATH: /lets-encrypt/production/
  - task: provision-certificate
    file: cg-provision-repo/ci/provision-certificate.yml
    params:
      CERT_PREFIX: star.pages-staging.cloud.gov
      ACME_SERVER: https://acme-v02.api.letsencrypt.org/directory
      DOMAIN: "*.pages-staging.cloud.gov"
      EMAIL: cloud-gov-operations@gsa.gov
  - task: upload-certificate
    file: cg-provision-repo/ci/upload-certificate.yml
    params:
      AWS_DEFAULT_REGION: ((aws_default_region))
      CERT_PATH: /lets-encrypt/production/
      CERT_PREFIX: star.pages-staging.cloud.gov
  on_failure:
    put: slack
    params:
      text: |
        :x: Failed to check ACME certificates for *.pages-staging.cloud.gov
        <$ATC_EXTERNAL_URL/teams/$BUILD_TEAM_NAME/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME|View build details>
      channel: ((slack-channel))
      username: ((slack-username))
      icon_url: ((slack-icon-url))

- name: acme-certificate-staging-pages-sites
  plan:
  - in_parallel:
    - get: acme-timer
      trigger: true
    - get: cg-provision-repo
    - get: terraform-yaml-tooling
      resource: terraform-yaml-tooling
    - get: terraform-yaml-external
      resource: terraform-yaml-external-production
  - task: check-certificates
    file: cg-provision-repo/ci/check-certificates.yml
    params:
      AWS_DEFAULT_REGION: ((aws_default_region))
      CERT_PATH: /lets-encrypt/production/
  - task: provision-certificate
    file: cg-provision-repo/ci/provision-certificate.yml
    params:
      CERT_PREFIX: star.sites.pages-staging.cloud.gov
      ACME_SERVER: https://acme-v02.api.letsencrypt.org/directory
      DOMAIN: "*.sites.pages-staging.cloud.gov"
      EMAIL: cloud-gov-operations@gsa.gov
  - task: upload-certificate
    file: cg-provision-repo/ci/upload-certificate.yml
    params:
      AWS_DEFAULT_REGION: ((aws_default_region))
      CERT_PATH: /lets-encrypt/production/
      CERT_PREFIX: star.sites.pages-staging.cloud.gov
  on_failure:
    put: slack
    params:
      text: |
        :x: Failed to check ACME certificates for *.sites.pages-staging.cloud.gov
        <$ATC_EXTERNAL_URL/teams/$BUILD_TEAM_NAME/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME|View build details>
      channel: ((slack-channel))
      username: ((slack-username))
      icon_url: ((slack-icon-url))

resources:
- name: pipeline-tasks
  type: git
  source:
    uri: ((pipeline_tasks_git_url))
    branch: ((pipeline_tasks_git_branch))

- name: cg-provision-repo
  type: git
  source:
    uri: ((cg_provision_git_url))
    branch: ((cg_provision_git_branch))

- name: cg-provision-repo-development
  type: git
  source:
    uri: ((cg_provision_development_git_url))
    branch: master

- name: cg-provision-repo-easta
  type: git
  source:
    uri: ((cg_provision_development_git_url))
    branch: regionalbosh

- name: cg-provision-repo-master
  type: git
  source:
    uri: ((cg_provision_development_git_url))
    branch: master

- name: pull-request
  type: pull-request
  check_every: 1m
  source:
    repository: ((cg_provision_git_repo))
    access_token: ((status_access_token))
    disable_forks: true

- name: terraform-yaml-tooling
  type: s3-iam
  source:
    bucket: ((aws_s3_tfstate_bucket))
    versioned_file: ((tf_state_file_tooling))
    region_name: ((aws_default_region))

- name: terraform-yaml-master-west
  type: s3-iam
  source:
    bucket: ((aws_s3_tfstate_bucket))
    versioned_file: ((tf_state_file_master_west))
    region_name: ((aws_default_region))

- name: terraform-yaml-master-east
  type: s3-iam
  source:
    bucket: ((aws_s3_tfstate_bucket))
    versioned_file: ((tf_state_file_master_east))
    region_name: ((aws_default_region))

- name: terraform-yaml-development
  type: s3-iam
  source:
    bucket: ((aws_s3_tfstate_bucket))
    versioned_file: ((tf_state_file_development))
    region_name: ((aws_default_region))

- name: terraform-yaml-staging
  type: s3-iam
  source:
    bucket: ((aws_s3_tfstate_bucket))
    versioned_file: ((tf_state_file_staging))
    region_name: ((aws_default_region))

- name: terraform-yaml-production
  type: s3-iam
  source:
    bucket: ((aws_s3_tfstate_bucket))
    versioned_file: ((tf_state_file_production))
    region_name: ((aws_default_region))

- name: terraform-yaml-easta
  type: s3-iam
  source:
    bucket: ((aws_s3_tfstate_bucket))
    versioned_file: ((tf_state_file_easta))
    region_name: ((aws_default_region))

- name: terraform-yaml-external-easta
  type: s3
  source:
    bucket: ((aws_external_s3_tfstate_bucket))
    versioned_file: ((tf_state_file_external_easta))
    access_key_id: ((aws_external_access_key_id))
    secret_access_key: ((aws_external_secret_access_key))
    region_name: ((aws_external_region))

- name: terraform-yaml-eastb
  type: s3-iam
  source:
    bucket: ((aws_s3_tfstate_bucket))
    versioned_file: ((tf_state_file_eastb))
    region_name: ((aws_default_region))

- name: terraform-yaml-external-eastb
  type: s3
  source:
    bucket: ((aws_external_s3_tfstate_bucket))
    versioned_file: ((tf_state_file_external_eastb))
    access_key_id: ((aws_external_access_key_id))
    secret_access_key: ((aws_external_secret_access_key))
    region_name: ((aws_external_region))

- name: terraform-yaml-westb
  type: s3-iam
  source:
    bucket: ((aws_s3_tfstate_bucket))
    versioned_file: ((tf_state_file_westb))
    region_name: ((aws_default_region))

- name: terraform-yaml-external-westb
  type: s3
  source:
    bucket: ((aws_external_s3_tfstate_bucket))
    versioned_file: ((tf_state_file_external_westb))
    access_key_id: ((aws_external_access_key_id))
    secret_access_key: ((aws_external_secret_access_key))
    region_name: ((aws_external_region))

- name: terraform-yaml-westc
  type: s3-iam
  source:
    bucket: ((aws_s3_tfstate_bucket))
    versioned_file: ((tf_state_file_westc))
    region_name: ((aws_default_region))

- name: terraform-yaml-external-westc
  type: s3
  source:
    bucket: ((aws_external_s3_tfstate_bucket))
    versioned_file: ((tf_state_file_external_westc))
    access_key_id: ((aws_external_access_key_id))
    secret_access_key: ((aws_external_secret_access_key))
    region_name: ((aws_external_region))

- name: terraform-yaml-external-staging
  type: s3
  source:
    bucket: ((aws_external_s3_tfstate_bucket))
    versioned_file: ((tf_state_file_external_staging))
    access_key_id: ((aws_external_access_key_id))
    secret_access_key: ((aws_external_secret_access_key))
    region_name: ((aws_external_region))

- name: terraform-yaml-external-production
  type: s3
  source:
    bucket: ((aws_external_s3_tfstate_bucket))
    versioned_file: ((tf_state_file_external_production))
    access_key_id: ((aws_external_access_key_id))
    secret_access_key: ((aws_external_secret_access_key))
    region_name: ((aws_external_region))

- name: plan-timer
  type: time
  source:
    interval: 24h
    location: America/New_York

- name: acme-timer
  type: time
  source:
    interval: 24h
    location: America/New_York

- name: slack
  type: slack-notification
  source:
    url: ((slack-webhook-url))

resource_types:
- name: pull-request
  type: docker-image
  source:
    repository: teliaoss/github-pr-resource

- name: s3-iam
  type: docker-image
  source:
    repository: 18fgsa/s3-resource

- name: slack-notification
  type: docker-image
  source:
    repository: cfcommunity/slack-notification-resource
